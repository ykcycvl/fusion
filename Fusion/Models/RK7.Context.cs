//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fusion.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RK7Entities : DbContext
    {
        public RK7Entities()
            : base("name=RK7Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C_DEL_COMMENTPARTS> C_DEL_COMMENTPARTS { get; set; }
        public virtual DbSet<C_DEL_LOGBOOK> C_DEL_LOGBOOK { get; set; }
        public virtual DbSet<ACTIVITYLIST> ACTIVITYLIST { get; set; }
        public virtual DbSet<ALIASES> ALIASES { get; set; }
        public virtual DbSet<ALIASLANGUAGES> ALIASLANGUAGES { get; set; }
        public virtual DbSet<AVAILABILITYSCHEDULES> AVAILABILITYSCHEDULES { get; set; }
        public virtual DbSet<AWARDSPENALTIESDATA> AWARDSPENALTIESDATA { get; set; }
        public virtual DbSet<AWARDSPENALTIESGROUPS> AWARDSPENALTIESGROUPS { get; set; }
        public virtual DbSet<AWARDSPENALTIESTYPES> AWARDSPENALTIESTYPES { get; set; }
        public virtual DbSet<BANDEDPROPSRIGHTS> BANDEDPROPSRIGHTS { get; set; }
        public virtual DbSet<BASEDIALECT> BASEDIALECT { get; set; }
        public virtual DbSet<BONUSTYPES> BONUSTYPES { get; set; }
        public virtual DbSet<BRIGADES> BRIGADES { get; set; }
        public virtual DbSet<BUSINESSPERIODS> BUSINESSPERIODS { get; set; }
        public virtual DbSet<CASHES> CASHES { get; set; }
        public virtual DbSet<CASHGROUPS> CASHGROUPS { get; set; }
        public virtual DbSet<CASHINOUT> CASHINOUT { get; set; }
        public virtual DbSet<CASHMANCORRDATA> CASHMANCORRDATA { get; set; }
        public virtual DbSet<CASHMANCORRFIELDS> CASHMANCORRFIELDS { get; set; }
        public virtual DbSet<CASHMANCORRFIELDSETS> CASHMANCORRFIELDSETS { get; set; }
        public virtual DbSet<CASHMANCORRGROUPS> CASHMANCORRGROUPS { get; set; }
        public virtual DbSet<CASHMANCORRS> CASHMANCORRS { get; set; }
        public virtual DbSet<CASHMANCORRTYPES> CASHMANCORRTYPES { get; set; }
        public virtual DbSet<CASHMANDEFAULTCORR> CASHMANDEFAULTCORR { get; set; }
        public virtual DbSet<CASHMANDOCINFO> CASHMANDOCINFO { get; set; }
        public virtual DbSet<CASHMANDOCS> CASHMANDOCS { get; set; }
        public virtual DbSet<CASHMANREPORTS> CASHMANREPORTS { get; set; }
        public virtual DbSet<CASHMANSETTINGS> CASHMANSETTINGS { get; set; }
        public virtual DbSet<CASHMANZREPORTS> CASHMANZREPORTS { get; set; }
        public virtual DbSet<CASHMANZREPORTTAXES> CASHMANZREPORTTAXES { get; set; }
        public virtual DbSet<CASHREPORTDETAILS> CASHREPORTDETAILS { get; set; }
        public virtual DbSet<CASHSERVDATASTATUSES> CASHSERVDATASTATUSES { get; set; }
        public virtual DbSet<CATEGLIST> CATEGLIST { get; set; }
        public virtual DbSet<CHANGEABLEORDERTYPES> CHANGEABLEORDERTYPES { get; set; }
        public virtual DbSet<CHECKTABLES> CHECKTABLES { get; set; }
        public virtual DbSet<CLASSIFICATORGROUPS> CLASSIFICATORGROUPS { get; set; }
        public virtual DbSet<CLASSINFOGROUPS> CLASSINFOGROUPS { get; set; }
        public virtual DbSet<CLASSINFOLOGPROPS> CLASSINFOLOGPROPS { get; set; }
        public virtual DbSet<CLASSINFOS> CLASSINFOS { get; set; }
        public virtual DbSet<CLOCKRECS> CLOCKRECS { get; set; }
        public virtual DbSet<COLORMAPPINGS> COLORMAPPINGS { get; set; }
        public virtual DbSet<COLORSCHEMES> COLORSCHEMES { get; set; }
        public virtual DbSet<CONSUMATORS> CONSUMATORS { get; set; }
        public virtual DbSet<CONSUMTYPES> CONSUMTYPES { get; set; }
        public virtual DbSet<CUBEDIALECTS> CUBEDIALECTS { get; set; }
        public virtual DbSet<CURRENCIES> CURRENCIES { get; set; }
        public virtual DbSet<CURRENCYFACEVALUES> CURRENCYFACEVALUES { get; set; }
        public virtual DbSet<CURRENCYTYPES> CURRENCYTYPES { get; set; }
        public virtual DbSet<CURRLINES> CURRLINES { get; set; }
        public virtual DbSet<data_shcr_cm> data_shcr_cm { get; set; }
        public virtual DbSet<data_shcr_cm_atributes> data_shcr_cm_atributes { get; set; }
        public virtual DbSet<data_shcr_cm_detail> data_shcr_cm_detail { get; set; }
        public virtual DbSet<data_shcr_cm_tech> data_shcr_cm_tech { get; set; }
        public virtual DbSet<data_shcr_cm_version> data_shcr_cm_version { get; set; }
        public virtual DbSet<data_shcr_cmprotocol> data_shcr_cmprotocol { get; set; }
        public virtual DbSet<data_shcr_CorrFullList> data_shcr_CorrFullList { get; set; }
        public virtual DbSet<data_shcr_CorrTree> data_shcr_CorrTree { get; set; }
        public virtual DbSet<data_shcr_doc> data_shcr_doc { get; set; }
        public virtual DbSet<data_shcr_doc_attrs> data_shcr_doc_attrs { get; set; }
        public virtual DbSet<data_shcr_doc_lines> data_shcr_doc_lines { get; set; }
        public virtual DbSet<data_shcr_docprotocol> data_shcr_docprotocol { get; set; }
        public virtual DbSet<data_shcr_expdoc> data_shcr_expdoc { get; set; }
        public virtual DbSet<data_shcr_expdoc_lines> data_shcr_expdoc_lines { get; set; }
        public virtual DbSet<data_shcr_expdoc_lines_details> data_shcr_expdoc_lines_details { get; set; }
        public virtual DbSet<data_shcr_expdocprotocol> data_shcr_expdocprotocol { get; set; }
        public virtual DbSet<data_shcr_Goods> data_shcr_Goods { get; set; }
        public virtual DbSet<data_shcr_GoodsBaseAttrs> data_shcr_GoodsBaseAttrs { get; set; }
        public virtual DbSet<data_shcr_GoodsBaseCompl> data_shcr_GoodsBaseCompl { get; set; }
        public virtual DbSet<data_shcr_GoodsBaseMain> data_shcr_GoodsBaseMain { get; set; }
        public virtual DbSet<data_shcr_GoodsBaseMeasures> data_shcr_GoodsBaseMeasures { get; set; }
        public virtual DbSet<data_shcr_GoodsBaseStore> data_shcr_GoodsBaseStore { get; set; }
        public virtual DbSet<data_shcr_GoodsBaseWrite_Off> data_shcr_GoodsBaseWrite_Off { get; set; }
        public virtual DbSet<data_shcr_GoodsCtg> data_shcr_GoodsCtg { get; set; }
        public virtual DbSet<data_shcr_GoodsCtg2> data_shcr_GoodsCtg2 { get; set; }
        public virtual DbSet<data_shcr_GoodsTree> data_shcr_GoodsTree { get; set; }
        public virtual DbSet<data_shcr_idoc> data_shcr_idoc { get; set; }
        public virtual DbSet<data_shcr_idoc_lines> data_shcr_idoc_lines { get; set; }
        public virtual DbSet<data_shcr_idocprotocol> data_shcr_idocprotocol { get; set; }
        public virtual DbSet<data_shcr_Messages> data_shcr_Messages { get; set; }
        public virtual DbSet<data_shcr_MGroups> data_shcr_MGroups { get; set; }
        public virtual DbSet<data_shcr_MUnits> data_shcr_MUnits { get; set; }
        public virtual DbSet<data_shcr_OwnAttrs> data_shcr_OwnAttrs { get; set; }
        public virtual DbSet<data_shcr_PLDoc> data_shcr_PLDoc { get; set; }
        public virtual DbSet<data_shcr_PLDoc_details> data_shcr_PLDoc_details { get; set; }
        public virtual DbSet<data_shcr_ReplaceGoods> data_shcr_ReplaceGoods { get; set; }
        public virtual DbSet<data_shcr_ReplaceGrp> data_shcr_ReplaceGrp { get; set; }
        public virtual DbSet<data_shcr_settings> data_shcr_settings { get; set; }
        public virtual DbSet<data_shcr_StoreMapping> data_shcr_StoreMapping { get; set; }
        public virtual DbSet<data_shcr_TDoc> data_shcr_TDoc { get; set; }
        public virtual DbSet<data_shcr_TDoc_details> data_shcr_TDoc_details { get; set; }
        public virtual DbSet<DEFAULTERTYPES> DEFAULTERTYPES { get; set; }
        public virtual DbSet<DELIVERYDATA> DELIVERYDATA { get; set; }
        public virtual DbSet<DELIVERYZONES> DELIVERYZONES { get; set; }
        public virtual DbSet<DEPARTS> DEPARTS { get; set; }
        public virtual DbSet<DEPOSITCOLLECTREASONS> DEPOSITCOLLECTREASONS { get; set; }
        public virtual DbSet<DEVICEDATALOOKUPITEMS> DEVICEDATALOOKUPITEMS { get; set; }
        public virtual DbSet<DEVICES> DEVICES { get; set; }
        public virtual DbSet<DISCOUNTCOMPOSITIONS> DISCOUNTCOMPOSITIONS { get; set; }
        public virtual DbSet<DISCOUNTDETAILS> DISCOUNTDETAILS { get; set; }
        public virtual DbSet<DISCOUNTS> DISCOUNTS { get; set; }
        public virtual DbSet<DISCOUNTTYPES> DISCOUNTTYPES { get; set; }
        public virtual DbSet<DISCPARTS> DISCPARTS { get; set; }
        public virtual DbSet<DISHCONSUMATORS> DISHCONSUMATORS { get; set; }
        public virtual DbSet<DISHDISCOUNTS> DISHDISCOUNTS { get; set; }
        public virtual DbSet<DISHGROUPS> DISHGROUPS { get; set; }
        public virtual DbSet<DISHMODIFIERS> DISHMODIFIERS { get; set; }
        public virtual DbSet<DISHRESTS> DISHRESTS { get; set; }
        public virtual DbSet<DISHVOIDS> DISHVOIDS { get; set; }
        public virtual DbSet<DISPLAYRESOLUTIONS> DISPLAYRESOLUTIONS { get; set; }
        public virtual DbSet<DOCUMENTMAKETSCHEMELINKS> DOCUMENTMAKETSCHEMELINKS { get; set; }
        public virtual DbSet<DOCUMENTS> DOCUMENTS { get; set; }
        public virtual DbSet<DOSINGDEVICES> DOSINGDEVICES { get; set; }
        public virtual DbSet<DRAWERLOG> DRAWERLOG { get; set; }
        public virtual DbSet<EMPLOYEEGROUPDETAILS> EMPLOYEEGROUPDETAILS { get; set; }
        public virtual DbSet<EMPLOYEEGROUPS> EMPLOYEEGROUPS { get; set; }
        public virtual DbSet<EMPLOYEEROLES> EMPLOYEEROLES { get; set; }
        public virtual DbSet<EMPLOYEES> EMPLOYEES { get; set; }
        public virtual DbSet<ENTRANCECARDTYPES> ENTRANCECARDTYPES { get; set; }
        public virtual DbSet<ENUMSTYPESDATAS> ENUMSTYPESDATAS { get; set; }
        public virtual DbSet<ENUMSTYPESINFOS> ENUMSTYPESINFOS { get; set; }
        public virtual DbSet<EXTBASECONFIGS> EXTBASECONFIGS { get; set; }
        public virtual DbSet<EXTERNALIDS> EXTERNALIDS { get; set; }
        public virtual DbSet<EXTRATABLES> EXTRATABLES { get; set; }
        public virtual DbSet<FILTERS> FILTERS { get; set; }
        public virtual DbSet<FISCDEVPARAMS> FISCDEVPARAMS { get; set; }
        public virtual DbSet<FISCDEVZRKEYS> FISCDEVZRKEYS { get; set; }
        public virtual DbSet<FORMDETAILS> FORMDETAILS { get; set; }
        public virtual DbSet<FORMS> FORMS { get; set; }
        public virtual DbSet<FORMSCHEMECHILDS> FORMSCHEMECHILDS { get; set; }
        public virtual DbSet<FORMSCHEMES> FORMSCHEMES { get; set; }
        public virtual DbSet<FUNCTIONKEYGROUPS> FUNCTIONKEYGROUPS { get; set; }
        public virtual DbSet<FUNCTIONKEYS> FUNCTIONKEYS { get; set; }
        public virtual DbSet<FUNDSACCOUNTINGPLACES> FUNDSACCOUNTINGPLACES { get; set; }
        public virtual DbSet<GENERATEDPROPDATAS> GENERATEDPROPDATAS { get; set; }
        public virtual DbSet<GENERATEDPROPGROUPS> GENERATEDPROPGROUPS { get; set; }
        public virtual DbSet<GENERATEDPROPTYPES> GENERATEDPROPTYPES { get; set; }
        public virtual DbSet<GENERATORS> GENERATORS { get; set; }
        public virtual DbSet<GLOBALSHIFTS> GLOBALSHIFTS { get; set; }
        public virtual DbSet<GLOBALSHIFTSTATS> GLOBALSHIFTSTATS { get; set; }
        public virtual DbSet<GroupFilters> GroupFilters { get; set; }
        public virtual DbSet<GUESTREPLIES> GUESTREPLIES { get; set; }
        public virtual DbSet<GUESTTYPES> GUESTTYPES { get; set; }
        public virtual DbSet<HALLPLANS> HALLPLANS { get; set; }
        public virtual DbSet<HARDWAREINFO> HARDWAREINFO { get; set; }
        public virtual DbSet<HOURLIST> HOURLIST { get; set; }
        public virtual DbSet<IMAGELIST> IMAGELIST { get; set; }
        public virtual DbSet<IMAGENODES> IMAGENODES { get; set; }
        public virtual DbSet<INPDEVTYPES> INPDEVTYPES { get; set; }
        public virtual DbSet<INTFTRANSACTIONS> INTFTRANSACTIONS { get; set; }
        public virtual DbSet<INVOICES> INVOICES { get; set; }
        public virtual DbSet<IR_DATASETFIELDS> IR_DATASETFIELDS { get; set; }
        public virtual DbSet<IR_DATASETPARAMETERS> IR_DATASETPARAMETERS { get; set; }
        public virtual DbSet<IR_DATASETS> IR_DATASETS { get; set; }
        public virtual DbSet<IR_DATASETSGROUPS> IR_DATASETSGROUPS { get; set; }
        public virtual DbSet<IR_LASTPARAMETERSVALSBYUSER> IR_LASTPARAMETERSVALSBYUSER { get; set; }
        public virtual DbSet<IR_LINKCONFIG> IR_LINKCONFIG { get; set; }
        public virtual DbSet<IR_LINKCONFIGDETAIL> IR_LINKCONFIGDETAIL { get; set; }
        public virtual DbSet<IR_REPORTDATASETS> IR_REPORTDATASETS { get; set; }
        public virtual DbSet<IR_REPORTS> IR_REPORTS { get; set; }
        public virtual DbSet<IR_USEPARAMETERSBYDATASET> IR_USEPARAMETERSBYDATASET { get; set; }
        public virtual DbSet<ITEMSSALED> ITEMSSALED { get; set; }
        public virtual DbSet<KBDLAYOUTS> KBDLAYOUTS { get; set; }
        public virtual DbSet<KBDTYPES> KBDTYPES { get; set; }
        public virtual DbSet<KDSDATA> KDSDATA { get; set; }
        public virtual DbSet<KURSES> KURSES { get; set; }
        public virtual DbSet<LINKEDSYSTEMSCONFS> LINKEDSYSTEMSCONFS { get; set; }
        public virtual DbSet<LINKEDSYSTEMSTYPES> LINKEDSYSTEMSTYPES { get; set; }
        public virtual DbSet<LOGVERSION> LOGVERSION { get; set; }
        public virtual DbSet<MAKETS> MAKETS { get; set; }
        public virtual DbSet<MAKETSCHEMEDETAILS> MAKETSCHEMEDETAILS { get; set; }
        public virtual DbSet<MAKETSCHEMES> MAKETSCHEMES { get; set; }
        public virtual DbSet<MB_DISCOUNTITEMS> MB_DISCOUNTITEMS { get; set; }
        public virtual DbSet<MB_DISCOUNTTHRESHOLD> MB_DISCOUNTTHRESHOLD { get; set; }
        public virtual DbSet<MB_DISHDISCOUNT> MB_DISHDISCOUNT { get; set; }
        public virtual DbSet<MB_DISHES> MB_DISHES { get; set; }
        public virtual DbSet<MB_GROUPS> MB_GROUPS { get; set; }
        public virtual DbSet<MB_MULTIDISHES> MB_MULTIDISHES { get; set; }
        public virtual DbSet<MB_SCREENS> MB_SCREENS { get; set; }
        public virtual DbSet<MB_SETTINGS> MB_SETTINGS { get; set; }
        public virtual DbSet<MB_USING> MB_USING { get; set; }
        public virtual DbSet<MCRALGORITHMS> MCRALGORITHMS { get; set; }
        public virtual DbSet<MENUITEMS> MENUITEMS { get; set; }
        public virtual DbSet<MESSAGES> MESSAGES { get; set; }
        public virtual DbSet<MODIFIERS> MODIFIERS { get; set; }
        public virtual DbSet<MODIGROUPS> MODIGROUPS { get; set; }
        public virtual DbSet<MODISCHEMEDETAILS> MODISCHEMEDETAILS { get; set; }
        public virtual DbSet<MODISCHEMES> MODISCHEMES { get; set; }
        public virtual DbSet<OLAPCUBEEXTENDEDFIELDS> OLAPCUBEEXTENDEDFIELDS { get; set; }
        public virtual DbSet<OLAPCUBEFIELDSDETAILS> OLAPCUBEFIELDSDETAILS { get; set; }
        public virtual DbSet<OLAPCUBES> OLAPCUBES { get; set; }
        public virtual DbSet<OLAPCUBESCHEMES> OLAPCUBESCHEMES { get; set; }
        public virtual DbSet<OLAPCUBESTATUSES> OLAPCUBESTATUSES { get; set; }
        public virtual DbSet<OLAPREPORTGROUPS> OLAPREPORTGROUPS { get; set; }
        public virtual DbSet<OLAPREPORTRIGHTS> OLAPREPORTRIGHTS { get; set; }
        public virtual DbSet<OLAPREPORTS> OLAPREPORTS { get; set; }
        public virtual DbSet<OPERATIONCLASSES> OPERATIONCLASSES { get; set; }
        public virtual DbSet<OPERATIONLOG> OPERATIONLOG { get; set; }
        public virtual DbSet<OPERATIONS> OPERATIONS { get; set; }
        public virtual DbSet<OPERATIONSUSERDATA> OPERATIONSUSERDATA { get; set; }
        public virtual DbSet<ORDER_MAP> ORDER_MAP { get; set; }
        public virtual DbSet<ORDERS> ORDERS { get; set; }
        public virtual DbSet<ORDERSESSIONS> ORDERSESSIONS { get; set; }
        public virtual DbSet<ORDERVOIDS> ORDERVOIDS { get; set; }
        public virtual DbSet<ORDERWAITERS> ORDERWAITERS { get; set; }
        public virtual DbSet<PARAMETEREXCEPTIONS> PARAMETEREXCEPTIONS { get; set; }
        public virtual DbSet<PARAMETERHIERARHIES> PARAMETERHIERARHIES { get; set; }
        public virtual DbSet<PARAMETERS> PARAMETERS { get; set; }
        public virtual DbSet<PAYBINDINGS> PAYBINDINGS { get; set; }
        public virtual DbSet<PAYMENTS> PAYMENTS { get; set; }
        public virtual DbSet<PAYMENTSEXTRA> PAYMENTSEXTRA { get; set; }
        public virtual DbSet<PDSCARDS> PDSCARDS { get; set; }
        public virtual DbSet<PERIODDETAILS> PERIODDETAILS { get; set; }
        public virtual DbSet<PERIODGROUPS> PERIODGROUPS { get; set; }
        public virtual DbSet<PERIODS> PERIODS { get; set; }
        public virtual DbSet<PRICECONSTANTS> PRICECONSTANTS { get; set; }
        public virtual DbSet<PRICECONSTANTTYPES> PRICECONSTANTTYPES { get; set; }
        public virtual DbSet<PRICEFORMULAS> PRICEFORMULAS { get; set; }
        public virtual DbSet<PRICES> PRICES { get; set; }
        public virtual DbSet<PRICETYPES> PRICETYPES { get; set; }
        public virtual DbSet<PRICEVALUES> PRICEVALUES { get; set; }
        public virtual DbSet<PRINTCHECKS> PRINTCHECKS { get; set; }
        public virtual DbSet<PRINTEDDOCUMENTS> PRINTEDDOCUMENTS { get; set; }
        public virtual DbSet<PRINTERPURPOSES> PRINTERPURPOSES { get; set; }
        public virtual DbSet<PRIVILEGEGROUPS> PRIVILEGEGROUPS { get; set; }
        public virtual DbSet<PRIVILEGES> PRIVILEGES { get; set; }
        public virtual DbSet<RATECLASSES> RATECLASSES { get; set; }
        public virtual DbSet<REFLINKS> REFLINKS { get; set; }
        public virtual DbSet<REFRESOURCES> REFRESOURCES { get; set; }
        public virtual DbSet<REFTABLES> REFTABLES { get; set; }
        public virtual DbSet<REGISTRATIONS> REGISTRATIONS { get; set; }
        public virtual DbSet<REPORTINGSERVERS> REPORTINGSERVERS { get; set; }
        public virtual DbSet<REPORTSERVERGROUPS> REPORTSERVERGROUPS { get; set; }
        public virtual DbSet<REPORTSERVERSYNCITEMS> REPORTSERVERSYNCITEMS { get; set; }
        public virtual DbSet<RESTAURANTCONCEPTS> RESTAURANTCONCEPTS { get; set; }
        public virtual DbSet<RESTAURANTFRANCHISES> RESTAURANTFRANCHISES { get; set; }
        public virtual DbSet<RESTAURANTREGIONS> RESTAURANTREGIONS { get; set; }
        public virtual DbSet<RESTAURANTS> RESTAURANTS { get; set; }
        public virtual DbSet<RIGHTGROUPS> RIGHTGROUPS { get; set; }
        public virtual DbSet<RIGHTS> RIGHTS { get; set; }
        public virtual DbSet<ROLES> ROLES { get; set; }
        public virtual DbSet<RPL8_TRANSACT> RPL8_TRANSACT { get; set; }
        public virtual DbSet<SALEDATAS> SALEDATAS { get; set; }
        public virtual DbSet<SCHEDULEDREPORTRECIPIENT> SCHEDULEDREPORTRECIPIENT { get; set; }
        public virtual DbSet<SCHEDULEDREPORTS> SCHEDULEDREPORTS { get; set; }
        public virtual DbSet<scheduler> scheduler { get; set; }
        public virtual DbSet<SCRIPTS> SCRIPTS { get; set; }
        public virtual DbSet<SCRIPTTYPES> SCRIPTTYPES { get; set; }
        public virtual DbSet<SELECTORDETAILS> SELECTORDETAILS { get; set; }
        public virtual DbSet<SELECTORGROUPS> SELECTORGROUPS { get; set; }
        public virtual DbSet<SELECTORHIERARHIES> SELECTORHIERARHIES { get; set; }
        public virtual DbSet<SELECTORS> SELECTORS { get; set; }
        public virtual DbSet<SELECTORTYPES> SELECTORTYPES { get; set; }
        public virtual DbSet<SELECTORTYPEVSTRADEOBJ> SELECTORTYPEVSTRADEOBJ { get; set; }
        public virtual DbSet<SERVICECHECKS> SERVICECHECKS { get; set; }
        public virtual DbSet<SERVICESCHEMES> SERVICESCHEMES { get; set; }
        public virtual DbSet<SERVINGPOSITIONS> SERVINGPOSITIONS { get; set; }
        public virtual DbSet<SESSIONDISHES> SESSIONDISHES { get; set; }
        public virtual DbSet<SHIFTS> SHIFTS { get; set; }
        public virtual DbSet<SQLCONSTS> SQLCONSTS { get; set; }
        public virtual DbSet<STAT_RK7_SHIFTS_REFERENCES> STAT_RK7_SHIFTS_REFERENCES { get; set; }
        public virtual DbSet<statistics> statistics { get; set; }
        public virtual DbSet<STOREHOUSECONFIGS> STOREHOUSECONFIGS { get; set; }
        public virtual DbSet<SYNCDATAS> SYNCDATAS { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TABLEATTRIBUTES> TABLEATTRIBUTES { get; set; }
        public virtual DbSet<TABLEGROUPS> TABLEGROUPS { get; set; }
        public virtual DbSet<TABLES> TABLES { get; set; }
        public virtual DbSet<TARIFFDATA> TARIFFDATA { get; set; }
        public virtual DbSet<TARIFFDETAILS> TARIFFDETAILS { get; set; }
        public virtual DbSet<TARIFFICATIONTYPES> TARIFFICATIONTYPES { get; set; }
        public virtual DbSet<TAXDISHRULES> TAXDISHRULES { get; set; }
        public virtual DbSet<TAXDISHTYPES> TAXDISHTYPES { get; set; }
        public virtual DbSet<TAXES> TAXES { get; set; }
        public virtual DbSet<TAXPARTS> TAXPARTS { get; set; }
        public virtual DbSet<TAXPAYRULES> TAXPAYRULES { get; set; }
        public virtual DbSet<TAXPAYTYPES> TAXPAYTYPES { get; set; }
        public virtual DbSet<TAXRATES> TAXRATES { get; set; }
        public virtual DbSet<TEMPACTIVITYLIST> TEMPACTIVITYLIST { get; set; }
        public virtual DbSet<TEMPAWARDSPENALTIESDATA> TEMPAWARDSPENALTIESDATA { get; set; }
        public virtual DbSet<TEMPCASHINOUT> TEMPCASHINOUT { get; set; }
        public virtual DbSet<TEMPCLOCKRECS> TEMPCLOCKRECS { get; set; }
        public virtual DbSet<TEMPCURRLINES> TEMPCURRLINES { get; set; }
        public virtual DbSet<TEMPDELIVERYDATA> TEMPDELIVERYDATA { get; set; }
        public virtual DbSet<TEMPDISCPARTS> TEMPDISCPARTS { get; set; }
        public virtual DbSet<TEMPDISHCONSUMATORS> TEMPDISHCONSUMATORS { get; set; }
        public virtual DbSet<TEMPDISHDISCOUNTS> TEMPDISHDISCOUNTS { get; set; }
        public virtual DbSet<TEMPDISHMODIFIERS> TEMPDISHMODIFIERS { get; set; }
        public virtual DbSet<TEMPDISHRESTS> TEMPDISHRESTS { get; set; }
        public virtual DbSet<TEMPDISHVOIDS> TEMPDISHVOIDS { get; set; }
        public virtual DbSet<TEMPDRAWERLOG> TEMPDRAWERLOG { get; set; }
        public virtual DbSet<TEMPEXTERNALIDS> TEMPEXTERNALIDS { get; set; }
        public virtual DbSet<TEMPEXTRATABLES> TEMPEXTRATABLES { get; set; }
        public virtual DbSet<TEMPGLOBALSHIFTS> TEMPGLOBALSHIFTS { get; set; }
        public virtual DbSet<TEMPGUESTREPLIES> TEMPGUESTREPLIES { get; set; }
        public virtual DbSet<TEMPHARDWAREINFO> TEMPHARDWAREINFO { get; set; }
        public virtual DbSet<TEMPINTFTRANSACTIONS> TEMPINTFTRANSACTIONS { get; set; }
        public virtual DbSet<TEMPINVOICES> TEMPINVOICES { get; set; }
        public virtual DbSet<TEMPITEMSSALED> TEMPITEMSSALED { get; set; }
        public virtual DbSet<TEMPKDSDATA> TEMPKDSDATA { get; set; }
        public virtual DbSet<TEMPMESSAGES> TEMPMESSAGES { get; set; }
        public virtual DbSet<TEMPOPERATIONLOG> TEMPOPERATIONLOG { get; set; }
        public virtual DbSet<TEMPORDERS> TEMPORDERS { get; set; }
        public virtual DbSet<TEMPORDERSESSIONS> TEMPORDERSESSIONS { get; set; }
        public virtual DbSet<TEMPORDERWAITERS> TEMPORDERWAITERS { get; set; }
        public virtual DbSet<TEMPPAYBINDINGS> TEMPPAYBINDINGS { get; set; }
        public virtual DbSet<TEMPPAYMENTS> TEMPPAYMENTS { get; set; }
        public virtual DbSet<TEMPPAYMENTSEXTRA> TEMPPAYMENTSEXTRA { get; set; }
        public virtual DbSet<TEMPPDSCARDS> TEMPPDSCARDS { get; set; }
        public virtual DbSet<TEMPPRINTCHECKS> TEMPPRINTCHECKS { get; set; }
        public virtual DbSet<TEMPPRINTEDDOCUMENTS> TEMPPRINTEDDOCUMENTS { get; set; }
        public virtual DbSet<TEMPREGISTRATIONS> TEMPREGISTRATIONS { get; set; }
        public virtual DbSet<TEMPSESSIONDISHES> TEMPSESSIONDISHES { get; set; }
        public virtual DbSet<TEMPSHIFTS> TEMPSHIFTS { get; set; }
        public virtual DbSet<TEMPTARIFFDATA> TEMPTARIFFDATA { get; set; }
        public virtual DbSet<TEMPTAXPARTS> TEMPTAXPARTS { get; set; }
        public virtual DbSet<TEMPVISITGUESTS> TEMPVISITGUESTS { get; set; }
        public virtual DbSet<TEMPVISITS> TEMPVISITS { get; set; }
        public virtual DbSet<TEMPZREPORTDATA> TEMPZREPORTDATA { get; set; }
        public virtual DbSet<TEMPZREPORTVALUES> TEMPZREPORTVALUES { get; set; }
        public virtual DbSet<TRADEGROUPAFFDETAILS> TRADEGROUPAFFDETAILS { get; set; }
        public virtual DbSet<TRADEGROUPDETAILS> TRADEGROUPDETAILS { get; set; }
        public virtual DbSet<TRADEGROUPS> TRADEGROUPS { get; set; }
        public virtual DbSet<TRANSACTIONS> TRANSACTIONS { get; set; }
        public virtual DbSet<UNCHANGEABLEORDERTYPES> UNCHANGEABLEORDERTYPES { get; set; }
        public virtual DbSet<VISITGUESTS> VISITGUESTS { get; set; }
        public virtual DbSet<VISITS> VISITS { get; set; }
        public virtual DbSet<WARNGROUPS> WARNGROUPS { get; set; }
        public virtual DbSet<ZREPORTDATA> ZREPORTDATA { get; set; }
        public virtual DbSet<ZREPORTVALUES> ZREPORTVALUES { get; set; }
        public virtual DbSet<data_shcr_CatFoodCost> data_shcr_CatFoodCost { get; set; }
        public virtual DbSet<REF_STAT_SP> REF_STAT_SP { get; set; }
        public virtual DbSet<STAT_RK7_SHIFTS_CHARGES> STAT_RK7_SHIFTS_CHARGES { get; set; }
        public virtual DbSet<STAT_RK7_SHIFTS_COMPARISON> STAT_RK7_SHIFTS_COMPARISON { get; set; }
        public virtual DbSet<STAT_RK7_SHIFTS_DELIVERY> STAT_RK7_SHIFTS_DELIVERY { get; set; }
        public virtual DbSet<STAT_RK7_SHIFTS_MODIFIERS> STAT_RK7_SHIFTS_MODIFIERS { get; set; }
        public virtual DbSet<STAT_RK7_SHIFTS_PARAMS> STAT_RK7_SHIFTS_PARAMS { get; set; }
        public virtual DbSet<STAT_RK7_SHIFTS_REVENUE> STAT_RK7_SHIFTS_REVENUE { get; set; }
        public virtual DbSet<STAT_RK7_SHIFTS_TAXES> STAT_RK7_SHIFTS_TAXES { get; set; }
        public virtual DbSet<STAT_RK7_SHIFTS_VOIDS> STAT_RK7_SHIFTS_VOIDS { get; set; }
    
        public virtual int AddField(string column, string table, string ftype, Nullable<int> len)
        {
            var columnParameter = column != null ?
                new ObjectParameter("column", column) :
                new ObjectParameter("column", typeof(string));
    
            var tableParameter = table != null ?
                new ObjectParameter("table", table) :
                new ObjectParameter("table", typeof(string));
    
            var ftypeParameter = ftype != null ?
                new ObjectParameter("ftype", ftype) :
                new ObjectParameter("ftype", typeof(string));
    
            var lenParameter = len.HasValue ?
                new ObjectParameter("len", len) :
                new ObjectParameter("len", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddField", columnParameter, tableParameter, ftypeParameter, lenParameter);
        }
    
        public virtual int Create_data_shcr_CatFoodCost()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Create_data_shcr_CatFoodCost");
        }
    
        public virtual int RPL8_GET_CURRENT_DATABASE_GUID(ObjectParameter sRVGUID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RPL8_GET_CURRENT_DATABASE_GUID", sRVGUID);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_MB_DISCOUNTITEM(string s_GUIDSTRING, string s_BOARD, Nullable<int> s_VAL, string s_NAME)
        {
            var s_GUIDSTRINGParameter = s_GUIDSTRING != null ?
                new ObjectParameter("S_GUIDSTRING", s_GUIDSTRING) :
                new ObjectParameter("S_GUIDSTRING", typeof(string));
    
            var s_BOARDParameter = s_BOARD != null ?
                new ObjectParameter("S_BOARD", s_BOARD) :
                new ObjectParameter("S_BOARD", typeof(string));
    
            var s_VALParameter = s_VAL.HasValue ?
                new ObjectParameter("S_VAL", s_VAL) :
                new ObjectParameter("S_VAL", typeof(int));
    
            var s_NAMEParameter = s_NAME != null ?
                new ObjectParameter("S_NAME", s_NAME) :
                new ObjectParameter("S_NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MB_DISCOUNTITEM", s_GUIDSTRINGParameter, s_BOARDParameter, s_VALParameter, s_NAMEParameter);
        }
    
        public virtual int SP_MB_DISCOUNTTHRESHOLD(string s_DISHGUID, string s_DISCOUNTGUID, string s_BOARD, Nullable<decimal> s_VAL, string s_NAME)
        {
            var s_DISHGUIDParameter = s_DISHGUID != null ?
                new ObjectParameter("S_DISHGUID", s_DISHGUID) :
                new ObjectParameter("S_DISHGUID", typeof(string));
    
            var s_DISCOUNTGUIDParameter = s_DISCOUNTGUID != null ?
                new ObjectParameter("S_DISCOUNTGUID", s_DISCOUNTGUID) :
                new ObjectParameter("S_DISCOUNTGUID", typeof(string));
    
            var s_BOARDParameter = s_BOARD != null ?
                new ObjectParameter("S_BOARD", s_BOARD) :
                new ObjectParameter("S_BOARD", typeof(string));
    
            var s_VALParameter = s_VAL.HasValue ?
                new ObjectParameter("S_VAL", s_VAL) :
                new ObjectParameter("S_VAL", typeof(decimal));
    
            var s_NAMEParameter = s_NAME != null ?
                new ObjectParameter("S_NAME", s_NAME) :
                new ObjectParameter("S_NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MB_DISCOUNTTHRESHOLD", s_DISHGUIDParameter, s_DISCOUNTGUIDParameter, s_BOARDParameter, s_VALParameter, s_NAMEParameter);
        }
    
        public virtual int SP_MB_DISHDISCOUNT(Nullable<int> s_CODE, string s_GUIDSTRING, Nullable<int> s_ITEMORDER, string s_BOARD, string s_NAME, string s_STARTDISCOUNT)
        {
            var s_CODEParameter = s_CODE.HasValue ?
                new ObjectParameter("S_CODE", s_CODE) :
                new ObjectParameter("S_CODE", typeof(int));
    
            var s_GUIDSTRINGParameter = s_GUIDSTRING != null ?
                new ObjectParameter("S_GUIDSTRING", s_GUIDSTRING) :
                new ObjectParameter("S_GUIDSTRING", typeof(string));
    
            var s_ITEMORDERParameter = s_ITEMORDER.HasValue ?
                new ObjectParameter("S_ITEMORDER", s_ITEMORDER) :
                new ObjectParameter("S_ITEMORDER", typeof(int));
    
            var s_BOARDParameter = s_BOARD != null ?
                new ObjectParameter("S_BOARD", s_BOARD) :
                new ObjectParameter("S_BOARD", typeof(string));
    
            var s_NAMEParameter = s_NAME != null ?
                new ObjectParameter("S_NAME", s_NAME) :
                new ObjectParameter("S_NAME", typeof(string));
    
            var s_STARTDISCOUNTParameter = s_STARTDISCOUNT != null ?
                new ObjectParameter("S_STARTDISCOUNT", s_STARTDISCOUNT) :
                new ObjectParameter("S_STARTDISCOUNT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MB_DISHDISCOUNT", s_CODEParameter, s_GUIDSTRINGParameter, s_ITEMORDERParameter, s_BOARDParameter, s_NAMEParameter, s_STARTDISCOUNTParameter);
        }
    
        public virtual int SP_MB_DISHES(Nullable<int> s_GROUPCODE, string s_GUIDSTRING, Nullable<int> s_ITEMORDER, string s_BOARD, Nullable<bool> s_TOSHOW, Nullable<int> s_TOSELECT, string s_PARENT, string s_NAME, string s_PICTURE, Nullable<bool> s_ISGROUP, Nullable<int> s_CODE, string s_ALTNAME, string s_DESCRIPTION)
        {
            var s_GROUPCODEParameter = s_GROUPCODE.HasValue ?
                new ObjectParameter("S_GROUPCODE", s_GROUPCODE) :
                new ObjectParameter("S_GROUPCODE", typeof(int));
    
            var s_GUIDSTRINGParameter = s_GUIDSTRING != null ?
                new ObjectParameter("S_GUIDSTRING", s_GUIDSTRING) :
                new ObjectParameter("S_GUIDSTRING", typeof(string));
    
            var s_ITEMORDERParameter = s_ITEMORDER.HasValue ?
                new ObjectParameter("S_ITEMORDER", s_ITEMORDER) :
                new ObjectParameter("S_ITEMORDER", typeof(int));
    
            var s_BOARDParameter = s_BOARD != null ?
                new ObjectParameter("S_BOARD", s_BOARD) :
                new ObjectParameter("S_BOARD", typeof(string));
    
            var s_TOSHOWParameter = s_TOSHOW.HasValue ?
                new ObjectParameter("S_TOSHOW", s_TOSHOW) :
                new ObjectParameter("S_TOSHOW", typeof(bool));
    
            var s_TOSELECTParameter = s_TOSELECT.HasValue ?
                new ObjectParameter("S_TOSELECT", s_TOSELECT) :
                new ObjectParameter("S_TOSELECT", typeof(int));
    
            var s_PARENTParameter = s_PARENT != null ?
                new ObjectParameter("S_PARENT", s_PARENT) :
                new ObjectParameter("S_PARENT", typeof(string));
    
            var s_NAMEParameter = s_NAME != null ?
                new ObjectParameter("S_NAME", s_NAME) :
                new ObjectParameter("S_NAME", typeof(string));
    
            var s_PICTUREParameter = s_PICTURE != null ?
                new ObjectParameter("S_PICTURE", s_PICTURE) :
                new ObjectParameter("S_PICTURE", typeof(string));
    
            var s_ISGROUPParameter = s_ISGROUP.HasValue ?
                new ObjectParameter("S_ISGROUP", s_ISGROUP) :
                new ObjectParameter("S_ISGROUP", typeof(bool));
    
            var s_CODEParameter = s_CODE.HasValue ?
                new ObjectParameter("S_CODE", s_CODE) :
                new ObjectParameter("S_CODE", typeof(int));
    
            var s_ALTNAMEParameter = s_ALTNAME != null ?
                new ObjectParameter("S_ALTNAME", s_ALTNAME) :
                new ObjectParameter("S_ALTNAME", typeof(string));
    
            var s_DESCRIPTIONParameter = s_DESCRIPTION != null ?
                new ObjectParameter("S_DESCRIPTION", s_DESCRIPTION) :
                new ObjectParameter("S_DESCRIPTION", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MB_DISHES", s_GROUPCODEParameter, s_GUIDSTRINGParameter, s_ITEMORDERParameter, s_BOARDParameter, s_TOSHOWParameter, s_TOSELECTParameter, s_PARENTParameter, s_NAMEParameter, s_PICTUREParameter, s_ISGROUPParameter, s_CODEParameter, s_ALTNAMEParameter, s_DESCRIPTIONParameter);
        }
    
        public virtual int SP_MB_GROUPS(Nullable<int> s_CODE, Nullable<int> s_PARENT, string s_BOARD, Nullable<int> s_ITEMORDER, Nullable<int> s_COLCOUNT, string s_NAME, Nullable<bool> s_TOSHOW, string s_CAPBACKGROUND, string s_FONTNAME, Nullable<int> s_FONTSIZE, Nullable<int> s_FONTCOLOR, Nullable<int> s_FONTSTYLE, string s_BACKGROUND, Nullable<int> s_BACKSGL, Nullable<int> s_BACKSGT, Nullable<int> s_BACKSGR, Nullable<int> s_BACKSGB, string s_BARPIC, Nullable<int> s_BARWIDTH, Nullable<int> s_BARHEIGHT, Nullable<int> s_BARSGL, Nullable<int> s_BARSGT, Nullable<int> s_BARSGR, Nullable<int> s_BARSGB, Nullable<int> s_BARFONTSIZE, Nullable<int> s_BARFONTCOLOR, Nullable<int> s_BARFONTSTYLE, Nullable<int> s_BARPADDING, Nullable<int> s_DESCRFONTSIZE, Nullable<int> s_DESCRFONTCOLOR, Nullable<int> s_DESCRFONTSTYLE, string s_SELECTPIC, Nullable<int> s_SELECTSGL, Nullable<int> s_SELECTSGT, Nullable<int> s_SELECTSGR, Nullable<int> s_SELECTSGB, string s_PRICEPIC, Nullable<int> s_PRICEWIDTH, Nullable<int> s_PRICEHEIGHT, Nullable<int> s_PRICESGL, Nullable<int> s_PRICESGT, Nullable<int> s_PRICESGR, Nullable<int> s_PRICESGB, Nullable<int> s_PRICEFONTSIZE, Nullable<int> s_PRICEFONTCOLOR, Nullable<int> s_PRICEFONTSTYLE, string s_MULTIPRICEPIC, string s_MULTIPRICEEND, Nullable<int> s_MULTIPRICEWIDTH, Nullable<int> s_MULTIPRICEHEIGHT, Nullable<int> s_MULTIPRICESGL, Nullable<int> s_MULTIPRICESGT, Nullable<int> s_MULTIPRICESGR, Nullable<int> s_MULTIPRICESGB, Nullable<int> s_MULTIPRICEFONTSIZE, Nullable<int> s_MULTIPRICEFONTCOLOR, Nullable<int> s_MULTIPRICEFONTSTYLE, string s_MULTINAMEEVEN, string s_MULTINAMEEVENEND, string s_MULTINAMEODD, string s_MULTINAMEODDEND, Nullable<int> s_MULTINAMESGL, Nullable<int> s_MULTINAMESGT, Nullable<int> s_MULTINAMESGR, Nullable<int> s_MULTINAMESGB, Nullable<int> s_MULTINAMEFONTSIZE, Nullable<int> s_MULTINAMEFONTCOLOR, Nullable<int> s_MULTINAMEFONTSTYLE, string s_SCROLLPIC, Nullable<bool> s_SCROLLING, Nullable<int> s_ELEMENTSANIMATION, Nullable<int> s_CAPHEIGHT, Nullable<int> s_CAPSTRETCHTYPE, Nullable<int> s_CAPSGL, Nullable<int> s_CAPSGT, Nullable<int> s_CAPSGR, Nullable<int> s_CAPSGB, Nullable<int> s_PADDINGX, Nullable<int> s_PADDINGY, Nullable<int> s_MARGINX, Nullable<int> s_MARGINY, Nullable<int> s_QNTWIDTH, Nullable<int> s_QNTHEIGHT, string s_QNTBACKGROUND, Nullable<int> s_QNTSGL, Nullable<int> s_QNTSGT, Nullable<int> s_QNTSGR, Nullable<int> s_QNTSGB, Nullable<int> s_QNTFONTSIZE, Nullable<int> s_QNTFONTCOLOR, Nullable<int> s_QNTFONTSTYLE, Nullable<bool> s_THUMBVISIBLE, string s_DEFAULTPRESET, Nullable<int> s_GROUPLAYOUT, Nullable<int> s_LISTLAYOUT, string s_LOOKUPNAME)
        {
            var s_CODEParameter = s_CODE.HasValue ?
                new ObjectParameter("S_CODE", s_CODE) :
                new ObjectParameter("S_CODE", typeof(int));
    
            var s_PARENTParameter = s_PARENT.HasValue ?
                new ObjectParameter("S_PARENT", s_PARENT) :
                new ObjectParameter("S_PARENT", typeof(int));
    
            var s_BOARDParameter = s_BOARD != null ?
                new ObjectParameter("S_BOARD", s_BOARD) :
                new ObjectParameter("S_BOARD", typeof(string));
    
            var s_ITEMORDERParameter = s_ITEMORDER.HasValue ?
                new ObjectParameter("S_ITEMORDER", s_ITEMORDER) :
                new ObjectParameter("S_ITEMORDER", typeof(int));
    
            var s_COLCOUNTParameter = s_COLCOUNT.HasValue ?
                new ObjectParameter("S_COLCOUNT", s_COLCOUNT) :
                new ObjectParameter("S_COLCOUNT", typeof(int));
    
            var s_NAMEParameter = s_NAME != null ?
                new ObjectParameter("S_NAME", s_NAME) :
                new ObjectParameter("S_NAME", typeof(string));
    
            var s_TOSHOWParameter = s_TOSHOW.HasValue ?
                new ObjectParameter("S_TOSHOW", s_TOSHOW) :
                new ObjectParameter("S_TOSHOW", typeof(bool));
    
            var s_CAPBACKGROUNDParameter = s_CAPBACKGROUND != null ?
                new ObjectParameter("S_CAPBACKGROUND", s_CAPBACKGROUND) :
                new ObjectParameter("S_CAPBACKGROUND", typeof(string));
    
            var s_FONTNAMEParameter = s_FONTNAME != null ?
                new ObjectParameter("S_FONTNAME", s_FONTNAME) :
                new ObjectParameter("S_FONTNAME", typeof(string));
    
            var s_FONTSIZEParameter = s_FONTSIZE.HasValue ?
                new ObjectParameter("S_FONTSIZE", s_FONTSIZE) :
                new ObjectParameter("S_FONTSIZE", typeof(int));
    
            var s_FONTCOLORParameter = s_FONTCOLOR.HasValue ?
                new ObjectParameter("S_FONTCOLOR", s_FONTCOLOR) :
                new ObjectParameter("S_FONTCOLOR", typeof(int));
    
            var s_FONTSTYLEParameter = s_FONTSTYLE.HasValue ?
                new ObjectParameter("S_FONTSTYLE", s_FONTSTYLE) :
                new ObjectParameter("S_FONTSTYLE", typeof(int));
    
            var s_BACKGROUNDParameter = s_BACKGROUND != null ?
                new ObjectParameter("S_BACKGROUND", s_BACKGROUND) :
                new ObjectParameter("S_BACKGROUND", typeof(string));
    
            var s_BACKSGLParameter = s_BACKSGL.HasValue ?
                new ObjectParameter("S_BACKSGL", s_BACKSGL) :
                new ObjectParameter("S_BACKSGL", typeof(int));
    
            var s_BACKSGTParameter = s_BACKSGT.HasValue ?
                new ObjectParameter("S_BACKSGT", s_BACKSGT) :
                new ObjectParameter("S_BACKSGT", typeof(int));
    
            var s_BACKSGRParameter = s_BACKSGR.HasValue ?
                new ObjectParameter("S_BACKSGR", s_BACKSGR) :
                new ObjectParameter("S_BACKSGR", typeof(int));
    
            var s_BACKSGBParameter = s_BACKSGB.HasValue ?
                new ObjectParameter("S_BACKSGB", s_BACKSGB) :
                new ObjectParameter("S_BACKSGB", typeof(int));
    
            var s_BARPICParameter = s_BARPIC != null ?
                new ObjectParameter("S_BARPIC", s_BARPIC) :
                new ObjectParameter("S_BARPIC", typeof(string));
    
            var s_BARWIDTHParameter = s_BARWIDTH.HasValue ?
                new ObjectParameter("S_BARWIDTH", s_BARWIDTH) :
                new ObjectParameter("S_BARWIDTH", typeof(int));
    
            var s_BARHEIGHTParameter = s_BARHEIGHT.HasValue ?
                new ObjectParameter("S_BARHEIGHT", s_BARHEIGHT) :
                new ObjectParameter("S_BARHEIGHT", typeof(int));
    
            var s_BARSGLParameter = s_BARSGL.HasValue ?
                new ObjectParameter("S_BARSGL", s_BARSGL) :
                new ObjectParameter("S_BARSGL", typeof(int));
    
            var s_BARSGTParameter = s_BARSGT.HasValue ?
                new ObjectParameter("S_BARSGT", s_BARSGT) :
                new ObjectParameter("S_BARSGT", typeof(int));
    
            var s_BARSGRParameter = s_BARSGR.HasValue ?
                new ObjectParameter("S_BARSGR", s_BARSGR) :
                new ObjectParameter("S_BARSGR", typeof(int));
    
            var s_BARSGBParameter = s_BARSGB.HasValue ?
                new ObjectParameter("S_BARSGB", s_BARSGB) :
                new ObjectParameter("S_BARSGB", typeof(int));
    
            var s_BARFONTSIZEParameter = s_BARFONTSIZE.HasValue ?
                new ObjectParameter("S_BARFONTSIZE", s_BARFONTSIZE) :
                new ObjectParameter("S_BARFONTSIZE", typeof(int));
    
            var s_BARFONTCOLORParameter = s_BARFONTCOLOR.HasValue ?
                new ObjectParameter("S_BARFONTCOLOR", s_BARFONTCOLOR) :
                new ObjectParameter("S_BARFONTCOLOR", typeof(int));
    
            var s_BARFONTSTYLEParameter = s_BARFONTSTYLE.HasValue ?
                new ObjectParameter("S_BARFONTSTYLE", s_BARFONTSTYLE) :
                new ObjectParameter("S_BARFONTSTYLE", typeof(int));
    
            var s_BARPADDINGParameter = s_BARPADDING.HasValue ?
                new ObjectParameter("S_BARPADDING", s_BARPADDING) :
                new ObjectParameter("S_BARPADDING", typeof(int));
    
            var s_DESCRFONTSIZEParameter = s_DESCRFONTSIZE.HasValue ?
                new ObjectParameter("S_DESCRFONTSIZE", s_DESCRFONTSIZE) :
                new ObjectParameter("S_DESCRFONTSIZE", typeof(int));
    
            var s_DESCRFONTCOLORParameter = s_DESCRFONTCOLOR.HasValue ?
                new ObjectParameter("S_DESCRFONTCOLOR", s_DESCRFONTCOLOR) :
                new ObjectParameter("S_DESCRFONTCOLOR", typeof(int));
    
            var s_DESCRFONTSTYLEParameter = s_DESCRFONTSTYLE.HasValue ?
                new ObjectParameter("S_DESCRFONTSTYLE", s_DESCRFONTSTYLE) :
                new ObjectParameter("S_DESCRFONTSTYLE", typeof(int));
    
            var s_SELECTPICParameter = s_SELECTPIC != null ?
                new ObjectParameter("S_SELECTPIC", s_SELECTPIC) :
                new ObjectParameter("S_SELECTPIC", typeof(string));
    
            var s_SELECTSGLParameter = s_SELECTSGL.HasValue ?
                new ObjectParameter("S_SELECTSGL", s_SELECTSGL) :
                new ObjectParameter("S_SELECTSGL", typeof(int));
    
            var s_SELECTSGTParameter = s_SELECTSGT.HasValue ?
                new ObjectParameter("S_SELECTSGT", s_SELECTSGT) :
                new ObjectParameter("S_SELECTSGT", typeof(int));
    
            var s_SELECTSGRParameter = s_SELECTSGR.HasValue ?
                new ObjectParameter("S_SELECTSGR", s_SELECTSGR) :
                new ObjectParameter("S_SELECTSGR", typeof(int));
    
            var s_SELECTSGBParameter = s_SELECTSGB.HasValue ?
                new ObjectParameter("S_SELECTSGB", s_SELECTSGB) :
                new ObjectParameter("S_SELECTSGB", typeof(int));
    
            var s_PRICEPICParameter = s_PRICEPIC != null ?
                new ObjectParameter("S_PRICEPIC", s_PRICEPIC) :
                new ObjectParameter("S_PRICEPIC", typeof(string));
    
            var s_PRICEWIDTHParameter = s_PRICEWIDTH.HasValue ?
                new ObjectParameter("S_PRICEWIDTH", s_PRICEWIDTH) :
                new ObjectParameter("S_PRICEWIDTH", typeof(int));
    
            var s_PRICEHEIGHTParameter = s_PRICEHEIGHT.HasValue ?
                new ObjectParameter("S_PRICEHEIGHT", s_PRICEHEIGHT) :
                new ObjectParameter("S_PRICEHEIGHT", typeof(int));
    
            var s_PRICESGLParameter = s_PRICESGL.HasValue ?
                new ObjectParameter("S_PRICESGL", s_PRICESGL) :
                new ObjectParameter("S_PRICESGL", typeof(int));
    
            var s_PRICESGTParameter = s_PRICESGT.HasValue ?
                new ObjectParameter("S_PRICESGT", s_PRICESGT) :
                new ObjectParameter("S_PRICESGT", typeof(int));
    
            var s_PRICESGRParameter = s_PRICESGR.HasValue ?
                new ObjectParameter("S_PRICESGR", s_PRICESGR) :
                new ObjectParameter("S_PRICESGR", typeof(int));
    
            var s_PRICESGBParameter = s_PRICESGB.HasValue ?
                new ObjectParameter("S_PRICESGB", s_PRICESGB) :
                new ObjectParameter("S_PRICESGB", typeof(int));
    
            var s_PRICEFONTSIZEParameter = s_PRICEFONTSIZE.HasValue ?
                new ObjectParameter("S_PRICEFONTSIZE", s_PRICEFONTSIZE) :
                new ObjectParameter("S_PRICEFONTSIZE", typeof(int));
    
            var s_PRICEFONTCOLORParameter = s_PRICEFONTCOLOR.HasValue ?
                new ObjectParameter("S_PRICEFONTCOLOR", s_PRICEFONTCOLOR) :
                new ObjectParameter("S_PRICEFONTCOLOR", typeof(int));
    
            var s_PRICEFONTSTYLEParameter = s_PRICEFONTSTYLE.HasValue ?
                new ObjectParameter("S_PRICEFONTSTYLE", s_PRICEFONTSTYLE) :
                new ObjectParameter("S_PRICEFONTSTYLE", typeof(int));
    
            var s_MULTIPRICEPICParameter = s_MULTIPRICEPIC != null ?
                new ObjectParameter("S_MULTIPRICEPIC", s_MULTIPRICEPIC) :
                new ObjectParameter("S_MULTIPRICEPIC", typeof(string));
    
            var s_MULTIPRICEENDParameter = s_MULTIPRICEEND != null ?
                new ObjectParameter("S_MULTIPRICEEND", s_MULTIPRICEEND) :
                new ObjectParameter("S_MULTIPRICEEND", typeof(string));
    
            var s_MULTIPRICEWIDTHParameter = s_MULTIPRICEWIDTH.HasValue ?
                new ObjectParameter("S_MULTIPRICEWIDTH", s_MULTIPRICEWIDTH) :
                new ObjectParameter("S_MULTIPRICEWIDTH", typeof(int));
    
            var s_MULTIPRICEHEIGHTParameter = s_MULTIPRICEHEIGHT.HasValue ?
                new ObjectParameter("S_MULTIPRICEHEIGHT", s_MULTIPRICEHEIGHT) :
                new ObjectParameter("S_MULTIPRICEHEIGHT", typeof(int));
    
            var s_MULTIPRICESGLParameter = s_MULTIPRICESGL.HasValue ?
                new ObjectParameter("S_MULTIPRICESGL", s_MULTIPRICESGL) :
                new ObjectParameter("S_MULTIPRICESGL", typeof(int));
    
            var s_MULTIPRICESGTParameter = s_MULTIPRICESGT.HasValue ?
                new ObjectParameter("S_MULTIPRICESGT", s_MULTIPRICESGT) :
                new ObjectParameter("S_MULTIPRICESGT", typeof(int));
    
            var s_MULTIPRICESGRParameter = s_MULTIPRICESGR.HasValue ?
                new ObjectParameter("S_MULTIPRICESGR", s_MULTIPRICESGR) :
                new ObjectParameter("S_MULTIPRICESGR", typeof(int));
    
            var s_MULTIPRICESGBParameter = s_MULTIPRICESGB.HasValue ?
                new ObjectParameter("S_MULTIPRICESGB", s_MULTIPRICESGB) :
                new ObjectParameter("S_MULTIPRICESGB", typeof(int));
    
            var s_MULTIPRICEFONTSIZEParameter = s_MULTIPRICEFONTSIZE.HasValue ?
                new ObjectParameter("S_MULTIPRICEFONTSIZE", s_MULTIPRICEFONTSIZE) :
                new ObjectParameter("S_MULTIPRICEFONTSIZE", typeof(int));
    
            var s_MULTIPRICEFONTCOLORParameter = s_MULTIPRICEFONTCOLOR.HasValue ?
                new ObjectParameter("S_MULTIPRICEFONTCOLOR", s_MULTIPRICEFONTCOLOR) :
                new ObjectParameter("S_MULTIPRICEFONTCOLOR", typeof(int));
    
            var s_MULTIPRICEFONTSTYLEParameter = s_MULTIPRICEFONTSTYLE.HasValue ?
                new ObjectParameter("S_MULTIPRICEFONTSTYLE", s_MULTIPRICEFONTSTYLE) :
                new ObjectParameter("S_MULTIPRICEFONTSTYLE", typeof(int));
    
            var s_MULTINAMEEVENParameter = s_MULTINAMEEVEN != null ?
                new ObjectParameter("S_MULTINAMEEVEN", s_MULTINAMEEVEN) :
                new ObjectParameter("S_MULTINAMEEVEN", typeof(string));
    
            var s_MULTINAMEEVENENDParameter = s_MULTINAMEEVENEND != null ?
                new ObjectParameter("S_MULTINAMEEVENEND", s_MULTINAMEEVENEND) :
                new ObjectParameter("S_MULTINAMEEVENEND", typeof(string));
    
            var s_MULTINAMEODDParameter = s_MULTINAMEODD != null ?
                new ObjectParameter("S_MULTINAMEODD", s_MULTINAMEODD) :
                new ObjectParameter("S_MULTINAMEODD", typeof(string));
    
            var s_MULTINAMEODDENDParameter = s_MULTINAMEODDEND != null ?
                new ObjectParameter("S_MULTINAMEODDEND", s_MULTINAMEODDEND) :
                new ObjectParameter("S_MULTINAMEODDEND", typeof(string));
    
            var s_MULTINAMESGLParameter = s_MULTINAMESGL.HasValue ?
                new ObjectParameter("S_MULTINAMESGL", s_MULTINAMESGL) :
                new ObjectParameter("S_MULTINAMESGL", typeof(int));
    
            var s_MULTINAMESGTParameter = s_MULTINAMESGT.HasValue ?
                new ObjectParameter("S_MULTINAMESGT", s_MULTINAMESGT) :
                new ObjectParameter("S_MULTINAMESGT", typeof(int));
    
            var s_MULTINAMESGRParameter = s_MULTINAMESGR.HasValue ?
                new ObjectParameter("S_MULTINAMESGR", s_MULTINAMESGR) :
                new ObjectParameter("S_MULTINAMESGR", typeof(int));
    
            var s_MULTINAMESGBParameter = s_MULTINAMESGB.HasValue ?
                new ObjectParameter("S_MULTINAMESGB", s_MULTINAMESGB) :
                new ObjectParameter("S_MULTINAMESGB", typeof(int));
    
            var s_MULTINAMEFONTSIZEParameter = s_MULTINAMEFONTSIZE.HasValue ?
                new ObjectParameter("S_MULTINAMEFONTSIZE", s_MULTINAMEFONTSIZE) :
                new ObjectParameter("S_MULTINAMEFONTSIZE", typeof(int));
    
            var s_MULTINAMEFONTCOLORParameter = s_MULTINAMEFONTCOLOR.HasValue ?
                new ObjectParameter("S_MULTINAMEFONTCOLOR", s_MULTINAMEFONTCOLOR) :
                new ObjectParameter("S_MULTINAMEFONTCOLOR", typeof(int));
    
            var s_MULTINAMEFONTSTYLEParameter = s_MULTINAMEFONTSTYLE.HasValue ?
                new ObjectParameter("S_MULTINAMEFONTSTYLE", s_MULTINAMEFONTSTYLE) :
                new ObjectParameter("S_MULTINAMEFONTSTYLE", typeof(int));
    
            var s_SCROLLPICParameter = s_SCROLLPIC != null ?
                new ObjectParameter("S_SCROLLPIC", s_SCROLLPIC) :
                new ObjectParameter("S_SCROLLPIC", typeof(string));
    
            var s_SCROLLINGParameter = s_SCROLLING.HasValue ?
                new ObjectParameter("S_SCROLLING", s_SCROLLING) :
                new ObjectParameter("S_SCROLLING", typeof(bool));
    
            var s_ELEMENTSANIMATIONParameter = s_ELEMENTSANIMATION.HasValue ?
                new ObjectParameter("S_ELEMENTSANIMATION", s_ELEMENTSANIMATION) :
                new ObjectParameter("S_ELEMENTSANIMATION", typeof(int));
    
            var s_CAPHEIGHTParameter = s_CAPHEIGHT.HasValue ?
                new ObjectParameter("S_CAPHEIGHT", s_CAPHEIGHT) :
                new ObjectParameter("S_CAPHEIGHT", typeof(int));
    
            var s_CAPSTRETCHTYPEParameter = s_CAPSTRETCHTYPE.HasValue ?
                new ObjectParameter("S_CAPSTRETCHTYPE", s_CAPSTRETCHTYPE) :
                new ObjectParameter("S_CAPSTRETCHTYPE", typeof(int));
    
            var s_CAPSGLParameter = s_CAPSGL.HasValue ?
                new ObjectParameter("S_CAPSGL", s_CAPSGL) :
                new ObjectParameter("S_CAPSGL", typeof(int));
    
            var s_CAPSGTParameter = s_CAPSGT.HasValue ?
                new ObjectParameter("S_CAPSGT", s_CAPSGT) :
                new ObjectParameter("S_CAPSGT", typeof(int));
    
            var s_CAPSGRParameter = s_CAPSGR.HasValue ?
                new ObjectParameter("S_CAPSGR", s_CAPSGR) :
                new ObjectParameter("S_CAPSGR", typeof(int));
    
            var s_CAPSGBParameter = s_CAPSGB.HasValue ?
                new ObjectParameter("S_CAPSGB", s_CAPSGB) :
                new ObjectParameter("S_CAPSGB", typeof(int));
    
            var s_PADDINGXParameter = s_PADDINGX.HasValue ?
                new ObjectParameter("S_PADDINGX", s_PADDINGX) :
                new ObjectParameter("S_PADDINGX", typeof(int));
    
            var s_PADDINGYParameter = s_PADDINGY.HasValue ?
                new ObjectParameter("S_PADDINGY", s_PADDINGY) :
                new ObjectParameter("S_PADDINGY", typeof(int));
    
            var s_MARGINXParameter = s_MARGINX.HasValue ?
                new ObjectParameter("S_MARGINX", s_MARGINX) :
                new ObjectParameter("S_MARGINX", typeof(int));
    
            var s_MARGINYParameter = s_MARGINY.HasValue ?
                new ObjectParameter("S_MARGINY", s_MARGINY) :
                new ObjectParameter("S_MARGINY", typeof(int));
    
            var s_QNTWIDTHParameter = s_QNTWIDTH.HasValue ?
                new ObjectParameter("S_QNTWIDTH", s_QNTWIDTH) :
                new ObjectParameter("S_QNTWIDTH", typeof(int));
    
            var s_QNTHEIGHTParameter = s_QNTHEIGHT.HasValue ?
                new ObjectParameter("S_QNTHEIGHT", s_QNTHEIGHT) :
                new ObjectParameter("S_QNTHEIGHT", typeof(int));
    
            var s_QNTBACKGROUNDParameter = s_QNTBACKGROUND != null ?
                new ObjectParameter("S_QNTBACKGROUND", s_QNTBACKGROUND) :
                new ObjectParameter("S_QNTBACKGROUND", typeof(string));
    
            var s_QNTSGLParameter = s_QNTSGL.HasValue ?
                new ObjectParameter("S_QNTSGL", s_QNTSGL) :
                new ObjectParameter("S_QNTSGL", typeof(int));
    
            var s_QNTSGTParameter = s_QNTSGT.HasValue ?
                new ObjectParameter("S_QNTSGT", s_QNTSGT) :
                new ObjectParameter("S_QNTSGT", typeof(int));
    
            var s_QNTSGRParameter = s_QNTSGR.HasValue ?
                new ObjectParameter("S_QNTSGR", s_QNTSGR) :
                new ObjectParameter("S_QNTSGR", typeof(int));
    
            var s_QNTSGBParameter = s_QNTSGB.HasValue ?
                new ObjectParameter("S_QNTSGB", s_QNTSGB) :
                new ObjectParameter("S_QNTSGB", typeof(int));
    
            var s_QNTFONTSIZEParameter = s_QNTFONTSIZE.HasValue ?
                new ObjectParameter("S_QNTFONTSIZE", s_QNTFONTSIZE) :
                new ObjectParameter("S_QNTFONTSIZE", typeof(int));
    
            var s_QNTFONTCOLORParameter = s_QNTFONTCOLOR.HasValue ?
                new ObjectParameter("S_QNTFONTCOLOR", s_QNTFONTCOLOR) :
                new ObjectParameter("S_QNTFONTCOLOR", typeof(int));
    
            var s_QNTFONTSTYLEParameter = s_QNTFONTSTYLE.HasValue ?
                new ObjectParameter("S_QNTFONTSTYLE", s_QNTFONTSTYLE) :
                new ObjectParameter("S_QNTFONTSTYLE", typeof(int));
    
            var s_THUMBVISIBLEParameter = s_THUMBVISIBLE.HasValue ?
                new ObjectParameter("S_THUMBVISIBLE", s_THUMBVISIBLE) :
                new ObjectParameter("S_THUMBVISIBLE", typeof(bool));
    
            var s_DEFAULTPRESETParameter = s_DEFAULTPRESET != null ?
                new ObjectParameter("S_DEFAULTPRESET", s_DEFAULTPRESET) :
                new ObjectParameter("S_DEFAULTPRESET", typeof(string));
    
            var s_GROUPLAYOUTParameter = s_GROUPLAYOUT.HasValue ?
                new ObjectParameter("S_GROUPLAYOUT", s_GROUPLAYOUT) :
                new ObjectParameter("S_GROUPLAYOUT", typeof(int));
    
            var s_LISTLAYOUTParameter = s_LISTLAYOUT.HasValue ?
                new ObjectParameter("S_LISTLAYOUT", s_LISTLAYOUT) :
                new ObjectParameter("S_LISTLAYOUT", typeof(int));
    
            var s_LOOKUPNAMEParameter = s_LOOKUPNAME != null ?
                new ObjectParameter("S_LOOKUPNAME", s_LOOKUPNAME) :
                new ObjectParameter("S_LOOKUPNAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MB_GROUPS", s_CODEParameter, s_PARENTParameter, s_BOARDParameter, s_ITEMORDERParameter, s_COLCOUNTParameter, s_NAMEParameter, s_TOSHOWParameter, s_CAPBACKGROUNDParameter, s_FONTNAMEParameter, s_FONTSIZEParameter, s_FONTCOLORParameter, s_FONTSTYLEParameter, s_BACKGROUNDParameter, s_BACKSGLParameter, s_BACKSGTParameter, s_BACKSGRParameter, s_BACKSGBParameter, s_BARPICParameter, s_BARWIDTHParameter, s_BARHEIGHTParameter, s_BARSGLParameter, s_BARSGTParameter, s_BARSGRParameter, s_BARSGBParameter, s_BARFONTSIZEParameter, s_BARFONTCOLORParameter, s_BARFONTSTYLEParameter, s_BARPADDINGParameter, s_DESCRFONTSIZEParameter, s_DESCRFONTCOLORParameter, s_DESCRFONTSTYLEParameter, s_SELECTPICParameter, s_SELECTSGLParameter, s_SELECTSGTParameter, s_SELECTSGRParameter, s_SELECTSGBParameter, s_PRICEPICParameter, s_PRICEWIDTHParameter, s_PRICEHEIGHTParameter, s_PRICESGLParameter, s_PRICESGTParameter, s_PRICESGRParameter, s_PRICESGBParameter, s_PRICEFONTSIZEParameter, s_PRICEFONTCOLORParameter, s_PRICEFONTSTYLEParameter, s_MULTIPRICEPICParameter, s_MULTIPRICEENDParameter, s_MULTIPRICEWIDTHParameter, s_MULTIPRICEHEIGHTParameter, s_MULTIPRICESGLParameter, s_MULTIPRICESGTParameter, s_MULTIPRICESGRParameter, s_MULTIPRICESGBParameter, s_MULTIPRICEFONTSIZEParameter, s_MULTIPRICEFONTCOLORParameter, s_MULTIPRICEFONTSTYLEParameter, s_MULTINAMEEVENParameter, s_MULTINAMEEVENENDParameter, s_MULTINAMEODDParameter, s_MULTINAMEODDENDParameter, s_MULTINAMESGLParameter, s_MULTINAMESGTParameter, s_MULTINAMESGRParameter, s_MULTINAMESGBParameter, s_MULTINAMEFONTSIZEParameter, s_MULTINAMEFONTCOLORParameter, s_MULTINAMEFONTSTYLEParameter, s_SCROLLPICParameter, s_SCROLLINGParameter, s_ELEMENTSANIMATIONParameter, s_CAPHEIGHTParameter, s_CAPSTRETCHTYPEParameter, s_CAPSGLParameter, s_CAPSGTParameter, s_CAPSGRParameter, s_CAPSGBParameter, s_PADDINGXParameter, s_PADDINGYParameter, s_MARGINXParameter, s_MARGINYParameter, s_QNTWIDTHParameter, s_QNTHEIGHTParameter, s_QNTBACKGROUNDParameter, s_QNTSGLParameter, s_QNTSGTParameter, s_QNTSGRParameter, s_QNTSGBParameter, s_QNTFONTSIZEParameter, s_QNTFONTCOLORParameter, s_QNTFONTSTYLEParameter, s_THUMBVISIBLEParameter, s_DEFAULTPRESETParameter, s_GROUPLAYOUTParameter, s_LISTLAYOUTParameter, s_LOOKUPNAMEParameter);
        }
    
        public virtual int SP_MB_SETTINGS(string s_GUIDSTRING, string s_NAME, byte[] s_DATA, byte[] s_XML, Nullable<int> s_DECIMALSDIG)
        {
            var s_GUIDSTRINGParameter = s_GUIDSTRING != null ?
                new ObjectParameter("S_GUIDSTRING", s_GUIDSTRING) :
                new ObjectParameter("S_GUIDSTRING", typeof(string));
    
            var s_NAMEParameter = s_NAME != null ?
                new ObjectParameter("S_NAME", s_NAME) :
                new ObjectParameter("S_NAME", typeof(string));
    
            var s_DATAParameter = s_DATA != null ?
                new ObjectParameter("S_DATA", s_DATA) :
                new ObjectParameter("S_DATA", typeof(byte[]));
    
            var s_XMLParameter = s_XML != null ?
                new ObjectParameter("S_XML", s_XML) :
                new ObjectParameter("S_XML", typeof(byte[]));
    
            var s_DECIMALSDIGParameter = s_DECIMALSDIG.HasValue ?
                new ObjectParameter("S_DECIMALSDIG", s_DECIMALSDIG) :
                new ObjectParameter("S_DECIMALSDIG", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MB_SETTINGS", s_GUIDSTRINGParameter, s_NAMEParameter, s_DATAParameter, s_XMLParameter, s_DECIMALSDIGParameter);
        }
    
        public virtual int SP_MB_TREE(string s_GUIDSTRING, string s_NAME, string s_BOARD, Nullable<int> s_ITEMORDER, Nullable<int> s_WIDTH, Nullable<int> s_HEIGHT, Nullable<int> s_X, Nullable<int> s_Y, Nullable<int> s_ISADVERT, Nullable<bool> s_ISSCREEN, Nullable<int> s_DECIMALSDIG, string s_HEADERPIC, Nullable<int> s_HEADERX, Nullable<int> s_HEADERY, Nullable<int> s_HEADERWIDTH, Nullable<int> s_HEADERHEIGHT)
        {
            var s_GUIDSTRINGParameter = s_GUIDSTRING != null ?
                new ObjectParameter("S_GUIDSTRING", s_GUIDSTRING) :
                new ObjectParameter("S_GUIDSTRING", typeof(string));
    
            var s_NAMEParameter = s_NAME != null ?
                new ObjectParameter("S_NAME", s_NAME) :
                new ObjectParameter("S_NAME", typeof(string));
    
            var s_BOARDParameter = s_BOARD != null ?
                new ObjectParameter("S_BOARD", s_BOARD) :
                new ObjectParameter("S_BOARD", typeof(string));
    
            var s_ITEMORDERParameter = s_ITEMORDER.HasValue ?
                new ObjectParameter("S_ITEMORDER", s_ITEMORDER) :
                new ObjectParameter("S_ITEMORDER", typeof(int));
    
            var s_WIDTHParameter = s_WIDTH.HasValue ?
                new ObjectParameter("S_WIDTH", s_WIDTH) :
                new ObjectParameter("S_WIDTH", typeof(int));
    
            var s_HEIGHTParameter = s_HEIGHT.HasValue ?
                new ObjectParameter("S_HEIGHT", s_HEIGHT) :
                new ObjectParameter("S_HEIGHT", typeof(int));
    
            var s_XParameter = s_X.HasValue ?
                new ObjectParameter("S_X", s_X) :
                new ObjectParameter("S_X", typeof(int));
    
            var s_YParameter = s_Y.HasValue ?
                new ObjectParameter("S_Y", s_Y) :
                new ObjectParameter("S_Y", typeof(int));
    
            var s_ISADVERTParameter = s_ISADVERT.HasValue ?
                new ObjectParameter("S_ISADVERT", s_ISADVERT) :
                new ObjectParameter("S_ISADVERT", typeof(int));
    
            var s_ISSCREENParameter = s_ISSCREEN.HasValue ?
                new ObjectParameter("S_ISSCREEN", s_ISSCREEN) :
                new ObjectParameter("S_ISSCREEN", typeof(bool));
    
            var s_DECIMALSDIGParameter = s_DECIMALSDIG.HasValue ?
                new ObjectParameter("S_DECIMALSDIG", s_DECIMALSDIG) :
                new ObjectParameter("S_DECIMALSDIG", typeof(int));
    
            var s_HEADERPICParameter = s_HEADERPIC != null ?
                new ObjectParameter("S_HEADERPIC", s_HEADERPIC) :
                new ObjectParameter("S_HEADERPIC", typeof(string));
    
            var s_HEADERXParameter = s_HEADERX.HasValue ?
                new ObjectParameter("S_HEADERX", s_HEADERX) :
                new ObjectParameter("S_HEADERX", typeof(int));
    
            var s_HEADERYParameter = s_HEADERY.HasValue ?
                new ObjectParameter("S_HEADERY", s_HEADERY) :
                new ObjectParameter("S_HEADERY", typeof(int));
    
            var s_HEADERWIDTHParameter = s_HEADERWIDTH.HasValue ?
                new ObjectParameter("S_HEADERWIDTH", s_HEADERWIDTH) :
                new ObjectParameter("S_HEADERWIDTH", typeof(int));
    
            var s_HEADERHEIGHTParameter = s_HEADERHEIGHT.HasValue ?
                new ObjectParameter("S_HEADERHEIGHT", s_HEADERHEIGHT) :
                new ObjectParameter("S_HEADERHEIGHT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MB_TREE", s_GUIDSTRINGParameter, s_NAMEParameter, s_BOARDParameter, s_ITEMORDERParameter, s_WIDTHParameter, s_HEIGHTParameter, s_XParameter, s_YParameter, s_ISADVERTParameter, s_ISSCREENParameter, s_DECIMALSDIGParameter, s_HEADERPICParameter, s_HEADERXParameter, s_HEADERYParameter, s_HEADERWIDTHParameter, s_HEADERHEIGHTParameter);
        }
    
        public virtual int SP_MB_USING(string s_RESTGUID, Nullable<int> s_RESTCODE, string s_RESTNAME, string s_BPGUID, Nullable<int> s_BPCODE, string s_BPNAME, string s_BOARDGUID)
        {
            var s_RESTGUIDParameter = s_RESTGUID != null ?
                new ObjectParameter("S_RESTGUID", s_RESTGUID) :
                new ObjectParameter("S_RESTGUID", typeof(string));
    
            var s_RESTCODEParameter = s_RESTCODE.HasValue ?
                new ObjectParameter("S_RESTCODE", s_RESTCODE) :
                new ObjectParameter("S_RESTCODE", typeof(int));
    
            var s_RESTNAMEParameter = s_RESTNAME != null ?
                new ObjectParameter("S_RESTNAME", s_RESTNAME) :
                new ObjectParameter("S_RESTNAME", typeof(string));
    
            var s_BPGUIDParameter = s_BPGUID != null ?
                new ObjectParameter("S_BPGUID", s_BPGUID) :
                new ObjectParameter("S_BPGUID", typeof(string));
    
            var s_BPCODEParameter = s_BPCODE.HasValue ?
                new ObjectParameter("S_BPCODE", s_BPCODE) :
                new ObjectParameter("S_BPCODE", typeof(int));
    
            var s_BPNAMEParameter = s_BPNAME != null ?
                new ObjectParameter("S_BPNAME", s_BPNAME) :
                new ObjectParameter("S_BPNAME", typeof(string));
    
            var s_BOARDGUIDParameter = s_BOARDGUID != null ?
                new ObjectParameter("S_BOARDGUID", s_BOARDGUID) :
                new ObjectParameter("S_BOARDGUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MB_USING", s_RESTGUIDParameter, s_RESTCODEParameter, s_RESTNAMEParameter, s_BPGUIDParameter, s_BPCODEParameter, s_BPNAMEParameter, s_BOARDGUIDParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int SP_STAT_ADDTODATALOG(Nullable<System.DateTime> dATETIME_START, string sERVICE_NAME, string sERVICE_GUID, string jOB_NAME, string jOB_GUID, string eXT_SERVER_NAME, string eXT_SERVER_STABLE, string eXT_SERVER_SGUID, Nullable<int> rESULT, string mESSAGE_SHORT, string gLOBALSHIFTGUID)
        {
            var dATETIME_STARTParameter = dATETIME_START.HasValue ?
                new ObjectParameter("DATETIME_START", dATETIME_START) :
                new ObjectParameter("DATETIME_START", typeof(System.DateTime));
    
            var sERVICE_NAMEParameter = sERVICE_NAME != null ?
                new ObjectParameter("SERVICE_NAME", sERVICE_NAME) :
                new ObjectParameter("SERVICE_NAME", typeof(string));
    
            var sERVICE_GUIDParameter = sERVICE_GUID != null ?
                new ObjectParameter("SERVICE_GUID", sERVICE_GUID) :
                new ObjectParameter("SERVICE_GUID", typeof(string));
    
            var jOB_NAMEParameter = jOB_NAME != null ?
                new ObjectParameter("JOB_NAME", jOB_NAME) :
                new ObjectParameter("JOB_NAME", typeof(string));
    
            var jOB_GUIDParameter = jOB_GUID != null ?
                new ObjectParameter("JOB_GUID", jOB_GUID) :
                new ObjectParameter("JOB_GUID", typeof(string));
    
            var eXT_SERVER_NAMEParameter = eXT_SERVER_NAME != null ?
                new ObjectParameter("EXT_SERVER_NAME", eXT_SERVER_NAME) :
                new ObjectParameter("EXT_SERVER_NAME", typeof(string));
    
            var eXT_SERVER_STABLEParameter = eXT_SERVER_STABLE != null ?
                new ObjectParameter("EXT_SERVER_STABLE", eXT_SERVER_STABLE) :
                new ObjectParameter("EXT_SERVER_STABLE", typeof(string));
    
            var eXT_SERVER_SGUIDParameter = eXT_SERVER_SGUID != null ?
                new ObjectParameter("EXT_SERVER_SGUID", eXT_SERVER_SGUID) :
                new ObjectParameter("EXT_SERVER_SGUID", typeof(string));
    
            var rESULTParameter = rESULT.HasValue ?
                new ObjectParameter("RESULT", rESULT) :
                new ObjectParameter("RESULT", typeof(int));
    
            var mESSAGE_SHORTParameter = mESSAGE_SHORT != null ?
                new ObjectParameter("MESSAGE_SHORT", mESSAGE_SHORT) :
                new ObjectParameter("MESSAGE_SHORT", typeof(string));
    
            var gLOBALSHIFTGUIDParameter = gLOBALSHIFTGUID != null ?
                new ObjectParameter("GLOBALSHIFTGUID", gLOBALSHIFTGUID) :
                new ObjectParameter("GLOBALSHIFTGUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_STAT_ADDTODATALOG", dATETIME_STARTParameter, sERVICE_NAMEParameter, sERVICE_GUIDParameter, jOB_NAMEParameter, jOB_GUIDParameter, eXT_SERVER_NAMEParameter, eXT_SERVER_STABLEParameter, eXT_SERVER_SGUIDParameter, rESULTParameter, mESSAGE_SHORTParameter, gLOBALSHIFTGUIDParameter);
        }
    
        public virtual int SP_STAT_CLEAR_DATALOG_WITH_PARAMETERS(string gUID)
        {
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_STAT_CLEAR_DATALOG_WITH_PARAMETERS", gUIDParameter);
        }
    
        public virtual int SP_STAT_CLEAR_SHIFT(string gUID)
        {
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_STAT_CLEAR_SHIFT", gUIDParameter);
        }
    
        public virtual int SP_STAT_CLEAR_SHIFT_HIDE(string gUID)
        {
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_STAT_CLEAR_SHIFT_HIDE", gUIDParameter);
        }
    
        public virtual int SP_STAT_DATAGATHER_RK7_SHIFTS_CHARGES(string gUID)
        {
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_STAT_DATAGATHER_RK7_SHIFTS_CHARGES", gUIDParameter);
        }
    
        public virtual int SP_STAT_DATAGATHER_RK7_SHIFTS_CHECKS(string gUID)
        {
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_STAT_DATAGATHER_RK7_SHIFTS_CHECKS", gUIDParameter);
        }
    
        public virtual int SP_STAT_DATAGATHER_RK7_SHIFTS_COMPARISON(string gUID)
        {
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_STAT_DATAGATHER_RK7_SHIFTS_COMPARISON", gUIDParameter);
        }
    
        public virtual int SP_STAT_DATAGATHER_RK7_SHIFTS_DELIVERY(string gUID)
        {
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_STAT_DATAGATHER_RK7_SHIFTS_DELIVERY", gUIDParameter);
        }
    
        public virtual int SP_STAT_DATAGATHER_RK7_SHIFTS_MODIFIERS(string gUID)
        {
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_STAT_DATAGATHER_RK7_SHIFTS_MODIFIERS", gUIDParameter);
        }
    
        public virtual int SP_STAT_DATAGATHER_RK7_SHIFTS_PARAMS(string gUID)
        {
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_STAT_DATAGATHER_RK7_SHIFTS_PARAMS", gUIDParameter);
        }
    
        public virtual int SP_STAT_DATAGATHER_RK7_SHIFTS_REFERENCES()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_STAT_DATAGATHER_RK7_SHIFTS_REFERENCES");
        }
    
        public virtual int SP_STAT_DATAGATHER_RK7_SHIFTS_REVENUE(string gUID)
        {
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_STAT_DATAGATHER_RK7_SHIFTS_REVENUE", gUIDParameter);
        }
    
        public virtual int SP_STAT_DATAGATHER_RK7_SHIFTS_TAXES(string gUID)
        {
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_STAT_DATAGATHER_RK7_SHIFTS_TAXES", gUIDParameter);
        }
    
        public virtual int SP_STAT_DATAGATHER_RK7_SHIFTS_VOIDS(string gUID)
        {
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_STAT_DATAGATHER_RK7_SHIFTS_VOIDS", gUIDParameter);
        }
    
        public virtual int SP_STAT_PROCESS_SHIFT(string gUID)
        {
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_STAT_PROCESS_SHIFT", gUIDParameter);
        }
    
        public virtual int SP_STAT_RECALCULATEFIRST10SHIFTS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_STAT_RECALCULATEFIRST10SHIFTS");
        }
    
        public virtual int SP_STAT_RECALCULATESHIFTS(Nullable<int> isAll, Nullable<int> isFull)
        {
            var isAllParameter = isAll.HasValue ?
                new ObjectParameter("IsAll", isAll) :
                new ObjectParameter("IsAll", typeof(int));
    
            var isFullParameter = isFull.HasValue ?
                new ObjectParameter("IsFull", isFull) :
                new ObjectParameter("IsFull", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_STAT_RECALCULATESHIFTS", isAllParameter, isFullParameter);
        }
    
        public virtual int SP_STAT_RECALCULATESHIFTS_BEFORE_REPORTEXECUTE(Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, Nullable<int> needRecalc)
        {
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("Date1", date1) :
                new ObjectParameter("Date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(System.DateTime));
    
            var needRecalcParameter = needRecalc.HasValue ?
                new ObjectParameter("NeedRecalc", needRecalc) :
                new ObjectParameter("NeedRecalc", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_STAT_RECALCULATESHIFTS_BEFORE_REPORTEXECUTE", date1Parameter, date2Parameter, needRecalcParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
