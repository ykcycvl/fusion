//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=4.6.1055.0.
// 
namespace RK7_qrySetRefData {
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class RK7Query : object, System.ComponentModel.INotifyPropertyChanged {
        
        private RK7QueryRK7Command rK7CommandField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public RK7QueryRK7Command RK7Command {
            get {
                return this.rK7CommandField;
            }
            set {
                this.rK7CommandField = value;
                this.RaisePropertyChanged("RK7Command");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class RK7QueryRK7Command : object, System.ComponentModel.INotifyPropertyChanged {
        
        private referentItems itemsField;
        
        private referentItems itemsToDeleteField;
        
        private RK7QueryRK7CommandMovePriorityItem movePriorityItemField;
        
        private string cMDField;
        
        private refName refNameField;
        
        public RK7QueryRK7Command() {
            this.cMDField = "SetRefData";
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public referentItems Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
                this.RaisePropertyChanged("Items");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public referentItems ItemsToDelete {
            get {
                return this.itemsToDeleteField;
            }
            set {
                this.itemsToDeleteField = value;
                this.RaisePropertyChanged("ItemsToDelete");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public RK7QueryRK7CommandMovePriorityItem MovePriorityItem {
            get {
                return this.movePriorityItemField;
            }
            set {
                this.movePriorityItemField = value;
                this.RaisePropertyChanged("MovePriorityItem");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CMD {
            get {
                return this.cMDField;
            }
            set {
                this.cMDField = value;
                this.RaisePropertyChanged("CMD");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public refName RefName {
            get {
                return this.refNameField;
            }
            set {
                this.refNameField = value;
                this.RaisePropertyChanged("RefName");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class referentItems : object, System.ComponentModel.INotifyPropertyChanged {
        
        private referentItem itemField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public referentItem Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
                this.RaisePropertyChanged("Item");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class referentItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string identField;
        
        private string gUIDStringField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string Ident {
            get {
                return this.identField;
            }
            set {
                this.identField = value;
                this.RaisePropertyChanged("Ident");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="normalizedString")]
        public string GUIDString {
            get {
                return this.gUIDStringField;
            }
            set {
                this.gUIDStringField = value;
                this.RaisePropertyChanged("GUIDString");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
                this.RaisePropertyChanged("AnyAttr");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class RK7QueryRK7CommandMovePriorityItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private referentItem itemField;
        
        private string beforeIdentField;
        
        private string beforeGUIDStringField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public referentItem Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
                this.RaisePropertyChanged("Item");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string BeforeIdent {
            get {
                return this.beforeIdentField;
            }
            set {
                this.beforeIdentField = value;
                this.RaisePropertyChanged("BeforeIdent");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="normalizedString")]
        public string BeforeGUIDString {
            get {
                return this.beforeGUIDStringField;
            }
            set {
                this.beforeGUIDStringField = value;
                this.RaisePropertyChanged("BeforeGUIDString");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.SerializableAttribute()]
    public enum refName {
        
        /// <remarks/>
        BonusTypes,
        
        /// <remarks/>
        Brigades,
        
        /// <remarks/>
        Cashes,
        
        /// <remarks/>
        CashGroups,
        
        /// <remarks/>
        CashReportDetails,
        
        /// <remarks/>
        CashServDataStatuses,
        
        /// <remarks/>
        CategList,
        
        /// <remarks/>
        ChangeableOrderTypes,
        
        /// <remarks/>
        CheckTables,
        
        /// <remarks/>
        ClassificatorGroups,
        
        /// <remarks/>
        ClassInfoGroups,
        
        /// <remarks/>
        ClassInfos,
        
        /// <remarks/>
        ClockRecs,
        
        /// <remarks/>
        ColorMappings,
        
        /// <remarks/>
        ColorSchemes,
        
        /// <remarks/>
        Consumators,
        
        /// <remarks/>
        ConsumTypes,
        
        /// <remarks/>
        Currencies,
        
        /// <remarks/>
        CurrencyFaceValues,
        
        /// <remarks/>
        CurrencyTypes,
        
        /// <remarks/>
        DefaulterTypes,
        
        /// <remarks/>
        DefferedSync,
        
        /// <remarks/>
        DeliveryZones,
        
        /// <remarks/>
        DepositCollectReasons,
        
        /// <remarks/>
        DeviceDataLookUpItems,
        
        /// <remarks/>
        Devices,
        
        /// <remarks/>
        DiscountCompositions,
        
        /// <remarks/>
        DiscountDetails,
        
        /// <remarks/>
        Discounts,
        
        /// <remarks/>
        DiscountTypes,
        
        /// <remarks/>
        DisplayResolutions,
        
        /// <remarks/>
        DocumentMaketSchemeLinks,
        
        /// <remarks/>
        Documents,
        
        /// <remarks/>
        DosingDevices,
        
        /// <remarks/>
        EmployeeGroupDetails,
        
        /// <remarks/>
        EmployeeGroups,
        
        /// <remarks/>
        Employees,
        
        /// <remarks/>
        EntranceCardTypes,
        
        /// <remarks/>
        Filters,
        
        /// <remarks/>
        FiscDevParams,
        
        /// <remarks/>
        FormDetails,
        
        /// <remarks/>
        Forms,
        
        /// <remarks/>
        FormSchemeChilds,
        
        /// <remarks/>
        FormSchemes,
        
        /// <remarks/>
        FunctionKeyGroups,
        
        /// <remarks/>
        FunctionKeys,
        
        /// <remarks/>
        GuestTypes,
        
        /// <remarks/>
        HallPlans,
        
        /// <remarks/>
        ImageList,
        
        /// <remarks/>
        ImageNodes,
        
        /// <remarks/>
        InpDevTypes,
        
        /// <remarks/>
        KBDLayouts,
        
        /// <remarks/>
        KBDTypes,
        
        /// <remarks/>
        Kurses,
        
        /// <remarks/>
        Makets,
        
        /// <remarks/>
        MaketSchemeDetails,
        
        /// <remarks/>
        MaketSchemes,
        
        /// <remarks/>
        McrAlgorithms,
        
        /// <remarks/>
        MenuItems,
        
        /// <remarks/>
        MenuItemsHierarchies,
        
        /// <remarks/>
        Modifiers,
        
        /// <remarks/>
        ModiGroups,
        
        /// <remarks/>
        ModiSchemeDetails,
        
        /// <remarks/>
        ModiSchemes,
        
        /// <remarks/>
        OlapCubes,
        
        /// <remarks/>
        OlapCubeSchemes,
        
        /// <remarks/>
        OperationClasses,
        
        /// <remarks/>
        Operations,
        
        /// <remarks/>
        OrderVoids,
        
        /// <remarks/>
        ParameterExceptions,
        
        /// <remarks/>
        ParameterHierarhies,
        
        /// <remarks/>
        Parameters,
        
        /// <remarks/>
        PeriodDetails,
        
        /// <remarks/>
        Periods,
        
        /// <remarks/>
        PersonList,
        
        /// <remarks/>
        PriceConstants,
        
        /// <remarks/>
        PriceConstantTypes,
        
        /// <remarks/>
        Prices,
        
        /// <remarks/>
        PriceTypes,
        
        /// <remarks/>
        PrinterPurposes,
        
        /// <remarks/>
        RateClasses,
        
        /// <remarks/>
        RefLinks,
        
        /// <remarks/>
        ReportingServers,
        
        /// <remarks/>
        RestaurantConcepts,
        
        /// <remarks/>
        RestaurantRegions,
        
        /// <remarks/>
        Restaurants,
        
        /// <remarks/>
        RightGroups,
        
        /// <remarks/>
        Rights,
        
        /// <remarks/>
        Roles,
        
        /// <remarks/>
        Scripts,
        
        /// <remarks/>
        ScriptTypes,
        
        /// <remarks/>
        SelectorDetails,
        
        /// <remarks/>
        SelectorGroups,
        
        /// <remarks/>
        SelectorHierarhies,
        
        /// <remarks/>
        Selectors,
        
        /// <remarks/>
        SelectorTypes,
        
        /// <remarks/>
        ServiceChecks,
        
        /// <remarks/>
        ServiceSchemes,
        
        /// <remarks/>
        ServingPositions,
        
        /// <remarks/>
        TableAttributes,
        
        /// <remarks/>
        TableGroups,
        
        /// <remarks/>
        Tables,
        
        /// <remarks/>
        TariffDetails,
        
        /// <remarks/>
        TarifficationTypes,
        
        /// <remarks/>
        TaskSetters,
        
        /// <remarks/>
        TaxDishRules,
        
        /// <remarks/>
        TaxDishTypes,
        
        /// <remarks/>
        Taxes,
        
        /// <remarks/>
        TaxPayRules,
        
        /// <remarks/>
        TaxPayTypes,
        
        /// <remarks/>
        TaxRates,
        
        /// <remarks/>
        TradeGroupDetails,
        
        /// <remarks/>
        TradeGroups,
        
        /// <remarks/>
        UnchangeableOrderTypes,
        
        /// <remarks/>
        Visits,
    }
}
