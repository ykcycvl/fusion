//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fusion.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CARD_SYSTEMEntities : DbContext
    {
        public CARD_SYSTEMEntities()
            : base("name=CARD_SYSTEMEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CARD_ACCOUNT_LEVELS> CARD_ACCOUNT_LEVELS { get; set; }
        public virtual DbSet<CARD_ACCOUNT_TYPES> CARD_ACCOUNT_TYPES { get; set; }
        public virtual DbSet<CARD_ADDRESS_TYPES> CARD_ADDRESS_TYPES { get; set; }
        public virtual DbSet<CARD_ADDRESSES> CARD_ADDRESSES { get; set; }
        public virtual DbSet<CARD_ATTRIBUTES> CARD_ATTRIBUTES { get; set; }
        public virtual DbSet<CARD_BLACK_LISTS> CARD_BLACK_LISTS { get; set; }
        public virtual DbSet<CARD_CARDS> CARD_CARDS { get; set; }
        public virtual DbSet<CARD_CARDS_RANGES> CARD_CARDS_RANGES { get; set; }
        public virtual DbSet<CARD_CITIES> CARD_CITIES { get; set; }
        public virtual DbSet<CARD_CLIENT_ACCOUNT_LEVELS> CARD_CLIENT_ACCOUNT_LEVELS { get; set; }
        public virtual DbSet<CARD_CLIENT_SESSIONS> CARD_CLIENT_SESSIONS { get; set; }
        public virtual DbSet<CARD_CLIENTS> CARD_CLIENTS { get; set; }
        public virtual DbSet<CARD_CONTACT_TYPES> CARD_CONTACT_TYPES { get; set; }
        public virtual DbSet<CARD_CONTACTS> CARD_CONTACTS { get; set; }
        public virtual DbSet<CARD_CONTRACT_TYPES> CARD_CONTRACT_TYPES { get; set; }
        public virtual DbSet<CARD_CONTRACTS> CARD_CONTRACTS { get; set; }
        public virtual DbSet<CARD_COUNTRIES> CARD_COUNTRIES { get; set; }
        public virtual DbSet<CARD_COUPON_CLIENTS> CARD_COUPON_CLIENTS { get; set; }
        public virtual DbSet<CARD_COUPON_RELEASES> CARD_COUPON_RELEASES { get; set; }
        public virtual DbSet<CARD_COUPON_TYPE_DETAILS> CARD_COUPON_TYPE_DETAILS { get; set; }
        public virtual DbSet<CARD_COUPON_TYPES> CARD_COUPON_TYPES { get; set; }
        public virtual DbSet<CARD_COUPONS> CARD_COUPONS { get; set; }
        public virtual DbSet<CARD_DIVISIONS> CARD_DIVISIONS { get; set; }
        public virtual DbSet<CARD_DOCUMENT_TYPES> CARD_DOCUMENT_TYPES { get; set; }
        public virtual DbSet<CARD_DOCUMENTS> CARD_DOCUMENTS { get; set; }
        public virtual DbSet<CARD_GROUPS> CARD_GROUPS { get; set; }
        public virtual DbSet<CARD_IMPORT> CARD_IMPORT { get; set; }
        public virtual DbSet<CARD_METRO_STATIONS> CARD_METRO_STATIONS { get; set; }
        public virtual DbSet<CARD_OPERATION_PARAMS> CARD_OPERATION_PARAMS { get; set; }
        public virtual DbSet<CARD_PEOPLE_ACCOUNTS> CARD_PEOPLE_ACCOUNTS { get; set; }
        public virtual DbSet<CARD_PEOPLES> CARD_PEOPLES { get; set; }
        public virtual DbSet<CARD_PROPERTIES> CARD_PROPERTIES { get; set; }
        public virtual DbSet<CARD_PROPERTIES_A> CARD_PROPERTIES_A { get; set; }
        public virtual DbSet<CARD_PROPERTY_VALUES> CARD_PROPERTY_VALUES { get; set; }
        public virtual DbSet<CARD_PROPERTY_VALUES_A> CARD_PROPERTY_VALUES_A { get; set; }
        public virtual DbSet<CARD_REGISTERS> CARD_REGISTERS { get; set; }
        public virtual DbSet<CARD_RELATIVE_TYPES> CARD_RELATIVE_TYPES { get; set; }
        public virtual DbSet<CARD_RELATIVES> CARD_RELATIVES { get; set; }
        public virtual DbSet<CARD_SCHEDULES> CARD_SCHEDULES { get; set; }
        public virtual DbSet<CARD_SCHEME_PARAMS> CARD_SCHEME_PARAMS { get; set; }
        public virtual DbSet<CARD_SCHEMES> CARD_SCHEMES { get; set; }
        public virtual DbSet<CARD_SEGMENTS> CARD_SEGMENTS { get; set; }
        public virtual DbSet<CARD_STREETS> CARD_STREETS { get; set; }
        public virtual DbSet<CARD_SYSTEM_ACCOUNTS> CARD_SYSTEM_ACCOUNTS { get; set; }
        public virtual DbSet<CARD_TIME_PERIODS> CARD_TIME_PERIODS { get; set; }
        public virtual DbSet<CARD_TIMES> CARD_TIMES { get; set; }
        public virtual DbSet<CARD_TRANSACTIONS> CARD_TRANSACTIONS { get; set; }
        public virtual DbSet<CARD_TRANSFER_REASONS> CARD_TRANSFER_REASONS { get; set; }
        public virtual DbSet<FIAS_ADDRESS_OBJECTS> FIAS_ADDRESS_OBJECTS { get; set; }
        public virtual DbSet<IR_LASTPARAMETERSVALSBYUSERS> IR_LASTPARAMETERSVALSBYUSERS { get; set; }
        public virtual DbSet<IR_REPORTGROUPS> IR_REPORTGROUPS { get; set; }
        public virtual DbSet<IR_SCHEDULE_CALENDAR> IR_SCHEDULE_CALENDAR { get; set; }
        public virtual DbSet<IR_SCHEDULE_CALENDAR_DETAIL> IR_SCHEDULE_CALENDAR_DETAIL { get; set; }
        public virtual DbSet<IR_SCHEDULE_RECIPIENT> IR_SCHEDULE_RECIPIENT { get; set; }
        public virtual DbSet<IR_SCHEDULE_REPORTS> IR_SCHEDULE_REPORTS { get; set; }
        public virtual DbSet<IR_SCHEDULEREPORTS_EVENTS> IR_SCHEDULEREPORTS_EVENTS { get; set; }
        public virtual DbSet<IR_SENDING_TYPE> IR_SENDING_TYPE { get; set; }
        public virtual DbSet<IR_SETTINGS_MAILING> IR_SETTINGS_MAILING { get; set; }
        public virtual DbSet<LOG_OPERATIONS> LOG_OPERATIONS { get; set; }
        public virtual DbSet<MSG_HELPDESC_HISTORY> MSG_HELPDESC_HISTORY { get; set; }
        public virtual DbSet<MSG_HELPDESC_INCOMING> MSG_HELPDESC_INCOMING { get; set; }
        public virtual DbSet<MSG_HELPDESC_TYPES> MSG_HELPDESC_TYPES { get; set; }
        public virtual DbSet<MSG_OUTGOINGS> MSG_OUTGOINGS { get; set; }
        public virtual DbSet<PLG_ACC_ACCOUNTS> PLG_ACC_ACCOUNTS { get; set; }
        public virtual DbSet<PLG_ACC_MAPS> PLG_ACC_MAPS { get; set; }
        public virtual DbSet<PLG_ACC_MAPS_CONTENT> PLG_ACC_MAPS_CONTENT { get; set; }
        public virtual DbSet<PLG_DATABASE> PLG_DATABASE { get; set; }
        public virtual DbSet<PLG_DATABASE_GROUP> PLG_DATABASE_GROUP { get; set; }
        public virtual DbSet<PLG_IR_DATASETFIELDS> PLG_IR_DATASETFIELDS { get; set; }
        public virtual DbSet<PLG_IR_DATASETPARAMETERS> PLG_IR_DATASETPARAMETERS { get; set; }
        public virtual DbSet<PLG_IR_DATASETS> PLG_IR_DATASETS { get; set; }
        public virtual DbSet<PLG_IR_DATASETSGROUPS> PLG_IR_DATASETSGROUPS { get; set; }
        public virtual DbSet<PLG_IR_EXT_STORAGE> PLG_IR_EXT_STORAGE { get; set; }
        public virtual DbSet<PLG_IR_EXT_STORAGE_GROUPS> PLG_IR_EXT_STORAGE_GROUPS { get; set; }
        public virtual DbSet<PLG_IR_EXT_STORAGE_SQL_SRV> PLG_IR_EXT_STORAGE_SQL_SRV { get; set; }
        public virtual DbSet<PLG_IR_LASTPARAMETERSVALSBYUSERS> PLG_IR_LASTPARAMETERSVALSBYUSERS { get; set; }
        public virtual DbSet<PLG_IR_LINKCONFIG> PLG_IR_LINKCONFIG { get; set; }
        public virtual DbSet<PLG_IR_LINKCONFIGDETAIL> PLG_IR_LINKCONFIGDETAIL { get; set; }
        public virtual DbSet<PLG_IR_REPORTDATASETS> PLG_IR_REPORTDATASETS { get; set; }
        public virtual DbSet<PLG_IR_REPORTGROUPS> PLG_IR_REPORTGROUPS { get; set; }
        public virtual DbSet<PLG_IR_REPORTS> PLG_IR_REPORTS { get; set; }
        public virtual DbSet<PLG_IR_REPORTS_SETTING> PLG_IR_REPORTS_SETTING { get; set; }
        public virtual DbSet<PLG_IR_SCHEDULE_EXPORT> PLG_IR_SCHEDULE_EXPORT { get; set; }
        public virtual DbSet<PLG_IR_SCHEDULE_EXPORTGROUPS> PLG_IR_SCHEDULE_EXPORTGROUPS { get; set; }
        public virtual DbSet<PLG_IR_USEPARAMETERSBYDATASET> PLG_IR_USEPARAMETERSBYDATASET { get; set; }
        public virtual DbSet<PLG_IR_WEBREPORTS> PLG_IR_WEBREPORTS { get; set; }
        public virtual DbSet<PLG_IR_WEBREPORTSGROUPS> PLG_IR_WEBREPORTSGROUPS { get; set; }
        public virtual DbSet<PLG_PLAN_PARAMETERS> PLG_PLAN_PARAMETERS { get; set; }
        public virtual DbSet<PLG_PLAN_PARAMETERS_VAL> PLG_PLAN_PARAMETERS_VAL { get; set; }
        public virtual DbSet<PLG_PLAN_PARAMETERSGROUPS> PLG_PLAN_PARAMETERSGROUPS { get; set; }
        public virtual DbSet<PLG_PLAN_PERIOD> PLG_PLAN_PERIOD { get; set; }
        public virtual DbSet<PLG_REPORTS_HISTORY> PLG_REPORTS_HISTORY { get; set; }
        public virtual DbSet<PLG_TABLE_LINK> PLG_TABLE_LINK { get; set; }
        public virtual DbSet<PLG_TELEGRAM_USERS> PLG_TELEGRAM_USERS { get; set; }
        public virtual DbSet<PLG_TYPE_DATABASE> PLG_TYPE_DATABASE { get; set; }
        public virtual DbSet<PLG_USE_OBJECT_BY_DB> PLG_USE_OBJECT_BY_DB { get; set; }
        public virtual DbSet<PLG_USEPARAMETERSBYLEVEL> PLG_USEPARAMETERSBYLEVEL { get; set; }
        public virtual DbSet<RPL8_TRANSACT> RPL8_TRANSACT { get; set; }
        public virtual DbSet<RPT_DATABASES> RPT_DATABASES { get; set; }
        public virtual DbSet<RPT_DATASOURCES> RPT_DATASOURCES { get; set; }
        public virtual DbSet<RPT_DATASOURCES_LINKS> RPT_DATASOURCES_LINKS { get; set; }
        public virtual DbSet<RPT_FILTER_DICTS> RPT_FILTER_DICTS { get; set; }
        public virtual DbSet<RPT_FILTERS> RPT_FILTERS { get; set; }
        public virtual DbSet<RPT_REPORT_PARAMS> RPT_REPORT_PARAMS { get; set; }
        public virtual DbSet<RPT_REPORTS> RPT_REPORTS { get; set; }
        public virtual DbSet<RPT_STORED_REPORTS> RPT_STORED_REPORTS { get; set; }
        public virtual DbSet<RPT_TEMPLATES> RPT_TEMPLATES { get; set; }
        public virtual DbSet<SYS_GENERATORS> SYS_GENERATORS { get; set; }
        public virtual DbSet<SYS_TABLE_DEPENDENCIES> SYS_TABLE_DEPENDENCIES { get; set; }
        public virtual DbSet<SYS_USER_RIGHTS> SYS_USER_RIGHTS { get; set; }
        public virtual DbSet<SYS_USER_ROLES> SYS_USER_ROLES { get; set; }
        public virtual DbSet<SYS_USERS> SYS_USERS { get; set; }
        public virtual DbSet<Table_1> Table_1 { get; set; }
        public virtual DbSet<TEMP_TASK> TEMP_TASK { get; set; }
        public virtual DbSet<TMP_USERS_SESSION> TMP_USERS_SESSION { get; set; }
        public virtual DbSet<CARD_ACCOUNT_TYPE_OPERATIONS> CARD_ACCOUNT_TYPE_OPERATIONS { get; set; }
        public virtual DbSet<CARD_CARD_CLIENTS> CARD_CARD_CLIENTS { get; set; }
        public virtual DbSet<CARD_CARD_PROPERTY_LINKS> CARD_CARD_PROPERTY_LINKS { get; set; }
        public virtual DbSet<CARD_CLIENT_ACCOUNT_TYPES> CARD_CLIENT_ACCOUNT_TYPES { get; set; }
        public virtual DbSet<CARD_CLIENT_PROPERTY_LINKS> CARD_CLIENT_PROPERTY_LINKS { get; set; }
        public virtual DbSet<CARD_CLIENT_PROPERTY_LINKS_A> CARD_CLIENT_PROPERTY_LINKS_A { get; set; }
        public virtual DbSet<CARD_CLIENT_RIGHTS> CARD_CLIENT_RIGHTS { get; set; }
        public virtual DbSet<CARD_CONTRACT_ADDRESSES> CARD_CONTRACT_ADDRESSES { get; set; }
        public virtual DbSet<CARD_CONTRACT_CARDS> CARD_CONTRACT_CARDS { get; set; }
        public virtual DbSet<CARD_CONTRACT_CONTACTS> CARD_CONTRACT_CONTACTS { get; set; }
        public virtual DbSet<CARD_CONTRACT_DOCUMENTS> CARD_CONTRACT_DOCUMENTS { get; set; }
        public virtual DbSet<CARD_CONTRACT_PEOPLES> CARD_CONTRACT_PEOPLES { get; set; }
        public virtual DbSet<CARD_DIVISION_LINKS> CARD_DIVISION_LINKS { get; set; }
        public virtual DbSet<CARD_GROUP_PROPERTY_LINKS> CARD_GROUP_PROPERTY_LINKS { get; set; }
        public virtual DbSet<CARD_HISTORY_REQUESTS> CARD_HISTORY_REQUESTS { get; set; }
        public virtual DbSet<CARD_PEOPLE_ACCOUNT_OPERATIONS> CARD_PEOPLE_ACCOUNT_OPERATIONS { get; set; }
        public virtual DbSet<CARD_PEOPLE_ACCOUNTS_CARD> CARD_PEOPLE_ACCOUNTS_CARD { get; set; }
        public virtual DbSet<CARD_PEOPLE_PROPERTY_LINKS> CARD_PEOPLE_PROPERTY_LINKS { get; set; }
        public virtual DbSet<CARD_SCHEME_OPERATIONS> CARD_SCHEME_OPERATIONS { get; set; }
        public virtual DbSet<CARD_SCRIPTS> CARD_SCRIPTS { get; set; }
        public virtual DbSet<CARD_TRANSACTION_NOTES> CARD_TRANSACTION_NOTES { get; set; }
        public virtual DbSet<CARD_TRANSACTION_OPERATIONS> CARD_TRANSACTION_OPERATIONS { get; set; }
        public virtual DbSet<CARD_TRANSACTION_TIMELIFES> CARD_TRANSACTION_TIMELIFES { get; set; }
        public virtual DbSet<CARD_UNPAY_TYPES> CARD_UNPAY_TYPES { get; set; }
        public virtual DbSet<LOG_USERS_ACTIVITY> LOG_USERS_ACTIVITY { get; set; }
        public virtual DbSet<MSG_SENTS> MSG_SENTS { get; set; }
        public virtual DbSet<RPT_CUBE_DIMENSION_MODS> RPT_CUBE_DIMENSION_MODS { get; set; }
        public virtual DbSet<RPT_CUBE_DIMENSIONS> RPT_CUBE_DIMENSIONS { get; set; }
        public virtual DbSet<RPT_CUBE_FACTS> RPT_CUBE_FACTS { get; set; }
        public virtual DbSet<RPT_FILTER_DICT_ITEMS> RPT_FILTER_DICT_ITEMS { get; set; }
        public virtual DbSet<RPT_PIVOT_FIELDS> RPT_PIVOT_FIELDS { get; set; }
        public virtual DbSet<RPT_REPORT_JOBS> RPT_REPORT_JOBS { get; set; }
        public virtual DbSet<SYS_STORED_PARAMS> SYS_STORED_PARAMS { get; set; }
        public virtual DbSet<SYS_TABLE_FIELDS> SYS_TABLE_FIELDS { get; set; }
        public virtual DbSet<SYS_TABLES> SYS_TABLES { get; set; }
        public virtual DbSet<SYS_USER_RIGHTS_LINKS> SYS_USER_RIGHTS_LINKS { get; set; }
        public virtual DbSet<SYS_USER_ROLE_RIGHTS> SYS_USER_ROLE_RIGHTS { get; set; }
        public virtual DbSet<SYS_VERSION_INFO> SYS_VERSION_INFO { get; set; }
    
        public virtual int AddCoupon(Nullable<long> peopleID, Nullable<int> couponDelay, Nullable<int> couponDelta, Nullable<int> couponTypeID, string couponNotes, Nullable<int> couponStatus, Nullable<int> divisionID, Nullable<int> actionID, Nullable<int> actionType, Nullable<long> clientID, Nullable<byte> notime)
        {
            var peopleIDParameter = peopleID.HasValue ?
                new ObjectParameter("PeopleID", peopleID) :
                new ObjectParameter("PeopleID", typeof(long));
    
            var couponDelayParameter = couponDelay.HasValue ?
                new ObjectParameter("CouponDelay", couponDelay) :
                new ObjectParameter("CouponDelay", typeof(int));
    
            var couponDeltaParameter = couponDelta.HasValue ?
                new ObjectParameter("CouponDelta", couponDelta) :
                new ObjectParameter("CouponDelta", typeof(int));
    
            var couponTypeIDParameter = couponTypeID.HasValue ?
                new ObjectParameter("CouponTypeID", couponTypeID) :
                new ObjectParameter("CouponTypeID", typeof(int));
    
            var couponNotesParameter = couponNotes != null ?
                new ObjectParameter("CouponNotes", couponNotes) :
                new ObjectParameter("CouponNotes", typeof(string));
    
            var couponStatusParameter = couponStatus.HasValue ?
                new ObjectParameter("CouponStatus", couponStatus) :
                new ObjectParameter("CouponStatus", typeof(int));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(int));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            var actionTypeParameter = actionType.HasValue ?
                new ObjectParameter("ActionType", actionType) :
                new ObjectParameter("ActionType", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(long));
    
            var notimeParameter = notime.HasValue ?
                new ObjectParameter("notime", notime) :
                new ObjectParameter("notime", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCoupon", peopleIDParameter, couponDelayParameter, couponDeltaParameter, couponTypeIDParameter, couponNotesParameter, couponStatusParameter, divisionIDParameter, actionIDParameter, actionTypeParameter, clientIDParameter, notimeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddNew_IMPORT(Nullable<short> sex, string birth, string f_NAME, string l_NAME, string m_NAME, string fULL_NAME, string phone, string email, Nullable<decimal> balance, Nullable<long> cardCode, Nullable<decimal> pIN, string iNN, string bonus)
        {
            var sexParameter = sex.HasValue ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(short));
    
            var birthParameter = birth != null ?
                new ObjectParameter("birth", birth) :
                new ObjectParameter("birth", typeof(string));
    
            var f_NAMEParameter = f_NAME != null ?
                new ObjectParameter("F_NAME", f_NAME) :
                new ObjectParameter("F_NAME", typeof(string));
    
            var l_NAMEParameter = l_NAME != null ?
                new ObjectParameter("L_NAME", l_NAME) :
                new ObjectParameter("L_NAME", typeof(string));
    
            var m_NAMEParameter = m_NAME != null ?
                new ObjectParameter("M_NAME", m_NAME) :
                new ObjectParameter("M_NAME", typeof(string));
    
            var fULL_NAMEParameter = fULL_NAME != null ?
                new ObjectParameter("FULL_NAME", fULL_NAME) :
                new ObjectParameter("FULL_NAME", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var cardCodeParameter = cardCode.HasValue ?
                new ObjectParameter("CardCode", cardCode) :
                new ObjectParameter("CardCode", typeof(long));
    
            var pINParameter = pIN.HasValue ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(decimal));
    
            var iNNParameter = iNN != null ?
                new ObjectParameter("INN", iNN) :
                new ObjectParameter("INN", typeof(string));
    
            var bonusParameter = bonus != null ?
                new ObjectParameter("bonus", bonus) :
                new ObjectParameter("bonus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddNew_IMPORT", sexParameter, birthParameter, f_NAMEParameter, l_NAMEParameter, m_NAMEParameter, fULL_NAMEParameter, phoneParameter, emailParameter, balanceParameter, cardCodeParameter, pINParameter, iNNParameter, bonusParameter);
        }
    
        public virtual int AddTransactionBK(string ttime, Nullable<int> ttype, Nullable<decimal> sum, Nullable<long> cardcode, string rcpt)
        {
            var ttimeParameter = ttime != null ?
                new ObjectParameter("ttime", ttime) :
                new ObjectParameter("ttime", typeof(string));
    
            var ttypeParameter = ttype.HasValue ?
                new ObjectParameter("ttype", ttype) :
                new ObjectParameter("ttype", typeof(int));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("sum", sum) :
                new ObjectParameter("sum", typeof(decimal));
    
            var cardcodeParameter = cardcode.HasValue ?
                new ObjectParameter("cardcode", cardcode) :
                new ObjectParameter("cardcode", typeof(long));
    
            var rcptParameter = rcpt != null ?
                new ObjectParameter("rcpt", rcpt) :
                new ObjectParameter("rcpt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTransactionBK", ttimeParameter, ttypeParameter, sumParameter, cardcodeParameter, rcptParameter);
        }
    
        public virtual int CARD_TEMP_FROM_SCRIPT(string nAME)
        {
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CARD_TEMP_FROM_SCRIPT", nAMEParameter);
        }
    
        public virtual int CARD_TEMP_FROM_SCRIPT_TR(ObjectParameter iNDEX, Nullable<int> cOUNT, Nullable<System.DateTime> rUNTIME, string nAME)
        {
            var cOUNTParameter = cOUNT.HasValue ?
                new ObjectParameter("COUNT", cOUNT) :
                new ObjectParameter("COUNT", typeof(int));
    
            var rUNTIMEParameter = rUNTIME.HasValue ?
                new ObjectParameter("RUNTIME", rUNTIME) :
                new ObjectParameter("RUNTIME", typeof(System.DateTime));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CARD_TEMP_FROM_SCRIPT_TR", iNDEX, cOUNTParameter, rUNTIMEParameter, nAMEParameter);
        }
    
        public virtual int HasPeriod(Nullable<System.DateTime> currentTime, Nullable<int> period, Nullable<int> value, Nullable<int> isCurrent, Nullable<int> isCalendar, Nullable<int> isTime, Nullable<System.TimeSpan> workTime, ObjectParameter from, ObjectParameter to)
        {
            var currentTimeParameter = currentTime.HasValue ?
                new ObjectParameter("CurrentTime", currentTime) :
                new ObjectParameter("CurrentTime", typeof(System.DateTime));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            var isCurrentParameter = isCurrent.HasValue ?
                new ObjectParameter("IsCurrent", isCurrent) :
                new ObjectParameter("IsCurrent", typeof(int));
    
            var isCalendarParameter = isCalendar.HasValue ?
                new ObjectParameter("IsCalendar", isCalendar) :
                new ObjectParameter("IsCalendar", typeof(int));
    
            var isTimeParameter = isTime.HasValue ?
                new ObjectParameter("IsTime", isTime) :
                new ObjectParameter("IsTime", typeof(int));
    
            var workTimeParameter = workTime.HasValue ?
                new ObjectParameter("WorkTime", workTime) :
                new ObjectParameter("WorkTime", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HasPeriod", currentTimeParameter, periodParameter, valueParameter, isCurrentParameter, isCalendarParameter, isTimeParameter, workTimeParameter, from, to);
        }
    
        public virtual int HasSegments(Nullable<long> peopleID, string segmentIDs, Nullable<int> required)
        {
            var peopleIDParameter = peopleID.HasValue ?
                new ObjectParameter("PeopleID", peopleID) :
                new ObjectParameter("PeopleID", typeof(long));
    
            var segmentIDsParameter = segmentIDs != null ?
                new ObjectParameter("SegmentIDs", segmentIDs) :
                new ObjectParameter("SegmentIDs", typeof(string));
    
            var requiredParameter = required.HasValue ?
                new ObjectParameter("Required", required) :
                new ObjectParameter("Required", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HasSegments", peopleIDParameter, segmentIDsParameter, requiredParameter);
        }
    
        public virtual int HasTime(Nullable<System.DateTime> currentTime, Nullable<System.DateTime> birthday, string timeIDs, ObjectParameter result)
        {
            var currentTimeParameter = currentTime.HasValue ?
                new ObjectParameter("CurrentTime", currentTime) :
                new ObjectParameter("CurrentTime", typeof(System.DateTime));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var timeIDsParameter = timeIDs != null ?
                new ObjectParameter("TimeIDs", timeIDs) :
                new ObjectParameter("TimeIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HasTime", currentTimeParameter, birthdayParameter, timeIDsParameter, result);
        }
    
        public virtual ObjectResult<MAILING_AUTORIZATION_Result> MAILING_AUTORIZATION(string lOGIN, string pASSDATA, Nullable<int> sESTIMEOUT)
        {
            var lOGINParameter = lOGIN != null ?
                new ObjectParameter("LOGIN", lOGIN) :
                new ObjectParameter("LOGIN", typeof(string));
    
            var pASSDATAParameter = pASSDATA != null ?
                new ObjectParameter("PASSDATA", pASSDATA) :
                new ObjectParameter("PASSDATA", typeof(string));
    
            var sESTIMEOUTParameter = sESTIMEOUT.HasValue ?
                new ObjectParameter("SESTIMEOUT", sESTIMEOUT) :
                new ObjectParameter("SESTIMEOUT", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MAILING_AUTORIZATION_Result>("MAILING_AUTORIZATION", lOGINParameter, pASSDATAParameter, sESTIMEOUTParameter);
        }
    
        public virtual int PLG_ADD_PLAN_PARAMETRS_VAL(string pLAN_PARAMETERS_GUID, Nullable<decimal> vALUE, string pLAN_LEVELS_GUID, string pLAN_YEAR, Nullable<long> pLAN_QUARTER, Nullable<long> pLAN_MONTH, Nullable<long> pLAN_DAY, string tR_GUID)
        {
            var pLAN_PARAMETERS_GUIDParameter = pLAN_PARAMETERS_GUID != null ?
                new ObjectParameter("PLAN_PARAMETERS_GUID", pLAN_PARAMETERS_GUID) :
                new ObjectParameter("PLAN_PARAMETERS_GUID", typeof(string));
    
            var vALUEParameter = vALUE.HasValue ?
                new ObjectParameter("VALUE", vALUE) :
                new ObjectParameter("VALUE", typeof(decimal));
    
            var pLAN_LEVELS_GUIDParameter = pLAN_LEVELS_GUID != null ?
                new ObjectParameter("PLAN_LEVELS_GUID", pLAN_LEVELS_GUID) :
                new ObjectParameter("PLAN_LEVELS_GUID", typeof(string));
    
            var pLAN_YEARParameter = pLAN_YEAR != null ?
                new ObjectParameter("PLAN_YEAR", pLAN_YEAR) :
                new ObjectParameter("PLAN_YEAR", typeof(string));
    
            var pLAN_QUARTERParameter = pLAN_QUARTER.HasValue ?
                new ObjectParameter("PLAN_QUARTER", pLAN_QUARTER) :
                new ObjectParameter("PLAN_QUARTER", typeof(long));
    
            var pLAN_MONTHParameter = pLAN_MONTH.HasValue ?
                new ObjectParameter("PLAN_MONTH", pLAN_MONTH) :
                new ObjectParameter("PLAN_MONTH", typeof(long));
    
            var pLAN_DAYParameter = pLAN_DAY.HasValue ?
                new ObjectParameter("PLAN_DAY", pLAN_DAY) :
                new ObjectParameter("PLAN_DAY", typeof(long));
    
            var tR_GUIDParameter = tR_GUID != null ?
                new ObjectParameter("TR_GUID", tR_GUID) :
                new ObjectParameter("TR_GUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PLG_ADD_PLAN_PARAMETRS_VAL", pLAN_PARAMETERS_GUIDParameter, vALUEParameter, pLAN_LEVELS_GUIDParameter, pLAN_YEARParameter, pLAN_QUARTERParameter, pLAN_MONTHParameter, pLAN_DAYParameter, tR_GUIDParameter);
        }
    
        public virtual int PLG_IR_ADD_ACC_MAPS_CONTENT(string acc_guid, Nullable<System.Guid> tRANSACTGUID)
        {
            var acc_guidParameter = acc_guid != null ?
                new ObjectParameter("acc_guid", acc_guid) :
                new ObjectParameter("acc_guid", typeof(string));
    
            var tRANSACTGUIDParameter = tRANSACTGUID.HasValue ?
                new ObjectParameter("TRANSACTGUID", tRANSACTGUID) :
                new ObjectParameter("TRANSACTGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PLG_IR_ADD_ACC_MAPS_CONTENT", acc_guidParameter, tRANSACTGUIDParameter);
        }
    
        public virtual int PLG_IR_ADD_MAP_MAPS_CONTENT(string map_guid, Nullable<System.Guid> tRANSACTGUID)
        {
            var map_guidParameter = map_guid != null ?
                new ObjectParameter("map_guid", map_guid) :
                new ObjectParameter("map_guid", typeof(string));
    
            var tRANSACTGUIDParameter = tRANSACTGUID.HasValue ?
                new ObjectParameter("TRANSACTGUID", tRANSACTGUID) :
                new ObjectParameter("TRANSACTGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PLG_IR_ADD_MAP_MAPS_CONTENT", map_guidParameter, tRANSACTGUIDParameter);
        }
    
        public virtual int PLG_IR_DATASET_CHILDS_COPY(string dataset_guid, string dataset_guid_copy, Nullable<System.Guid> transact_guid)
        {
            var dataset_guidParameter = dataset_guid != null ?
                new ObjectParameter("dataset_guid", dataset_guid) :
                new ObjectParameter("dataset_guid", typeof(string));
    
            var dataset_guid_copyParameter = dataset_guid_copy != null ?
                new ObjectParameter("dataset_guid_copy", dataset_guid_copy) :
                new ObjectParameter("dataset_guid_copy", typeof(string));
    
            var transact_guidParameter = transact_guid.HasValue ?
                new ObjectParameter("transact_guid", transact_guid) :
                new ObjectParameter("transact_guid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PLG_IR_DATASET_CHILDS_COPY", dataset_guidParameter, dataset_guid_copyParameter, transact_guidParameter);
        }
    
        public virtual int PLG_IR_DATASETFIELDS_ADD(string dataset_guid, string sysname, Nullable<System.Guid> transact_guid)
        {
            var dataset_guidParameter = dataset_guid != null ?
                new ObjectParameter("dataset_guid", dataset_guid) :
                new ObjectParameter("dataset_guid", typeof(string));
    
            var sysnameParameter = sysname != null ?
                new ObjectParameter("sysname", sysname) :
                new ObjectParameter("sysname", typeof(string));
    
            var transact_guidParameter = transact_guid.HasValue ?
                new ObjectParameter("transact_guid", transact_guid) :
                new ObjectParameter("transact_guid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PLG_IR_DATASETFIELDS_ADD", dataset_guidParameter, sysnameParameter, transact_guidParameter);
        }
    
        public virtual int PLG_IR_DATASETPARAMETERS_ADD(string dataset_guid, string sysname, Nullable<int> datetype, Nullable<System.Guid> transact_guid)
        {
            var dataset_guidParameter = dataset_guid != null ?
                new ObjectParameter("dataset_guid", dataset_guid) :
                new ObjectParameter("dataset_guid", typeof(string));
    
            var sysnameParameter = sysname != null ?
                new ObjectParameter("sysname", sysname) :
                new ObjectParameter("sysname", typeof(string));
    
            var datetypeParameter = datetype.HasValue ?
                new ObjectParameter("datetype", datetype) :
                new ObjectParameter("datetype", typeof(int));
    
            var transact_guidParameter = transact_guid.HasValue ?
                new ObjectParameter("transact_guid", transact_guid) :
                new ObjectParameter("transact_guid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PLG_IR_DATASETPARAMETERS_ADD", dataset_guidParameter, sysnameParameter, datetypeParameter, transact_guidParameter);
        }
    
        public virtual int PLG_PLAN_ADD_PARAMETERS_LEVELS(string levels, Nullable<System.Guid> tRANSACTGUID, string pARAMGUID)
        {
            var levelsParameter = levels != null ?
                new ObjectParameter("levels", levels) :
                new ObjectParameter("levels", typeof(string));
    
            var tRANSACTGUIDParameter = tRANSACTGUID.HasValue ?
                new ObjectParameter("TRANSACTGUID", tRANSACTGUID) :
                new ObjectParameter("TRANSACTGUID", typeof(System.Guid));
    
            var pARAMGUIDParameter = pARAMGUID != null ?
                new ObjectParameter("PARAMGUID", pARAMGUID) :
                new ObjectParameter("PARAMGUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PLG_PLAN_ADD_PARAMETERS_LEVELS", levelsParameter, tRANSACTGUIDParameter, pARAMGUIDParameter);
        }
    
        public virtual int RPL8_GET_CURRENT_DATABASE_GUID(ObjectParameter sRVGUID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RPL8_GET_CURRENT_DATABASE_GUID", sRVGUID);
        }
    
        public virtual int RPT_Report_CsDel(Nullable<int> report_ID)
        {
            var report_IDParameter = report_ID.HasValue ?
                new ObjectParameter("Report_ID", report_ID) :
                new ObjectParameter("Report_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RPT_Report_CsDel", report_IDParameter);
        }
    
        public virtual ObjectResult<SearchPeople_Result> SearchPeople(string phone, string email)
        {
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchPeople_Result>("SearchPeople", phoneParameter, emailParameter);
        }
    
        public virtual int SET_TASK_MAILING(ObjectParameter cnt)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SET_TASK_MAILING", cnt);
        }
    
        public virtual int SET_TASK_MAILING_NOW(ObjectParameter cnt, string gUIDREPORT, string gUIDCALEND)
        {
            var gUIDREPORTParameter = gUIDREPORT != null ?
                new ObjectParameter("GUIDREPORT", gUIDREPORT) :
                new ObjectParameter("GUIDREPORT", typeof(string));
    
            var gUIDCALENDParameter = gUIDCALEND != null ?
                new ObjectParameter("GUIDCALEND", gUIDCALEND) :
                new ObjectParameter("GUIDCALEND", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SET_TASK_MAILING_NOW", cnt, gUIDREPORTParameter, gUIDCALENDParameter);
        }
    
        public virtual int SYS_Create_Generator(string gen_Name, Nullable<int> gen_Value)
        {
            var gen_NameParameter = gen_Name != null ?
                new ObjectParameter("Gen_Name", gen_Name) :
                new ObjectParameter("Gen_Name", typeof(string));
    
            var gen_ValueParameter = gen_Value.HasValue ?
                new ObjectParameter("Gen_Value", gen_Value) :
                new ObjectParameter("Gen_Value", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SYS_Create_Generator", gen_NameParameter, gen_ValueParameter);
        }
    
        public virtual int SYS_Del_Rights_By_Role(Nullable<int> role_ID, Nullable<int> right_ID)
        {
            var role_IDParameter = role_ID.HasValue ?
                new ObjectParameter("Role_ID", role_ID) :
                new ObjectParameter("Role_ID", typeof(int));
    
            var right_IDParameter = right_ID.HasValue ?
                new ObjectParameter("Right_ID", right_ID) :
                new ObjectParameter("Right_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SYS_Del_Rights_By_Role", role_IDParameter, right_IDParameter);
        }
    
        public virtual int SYS_Drop_Generator(string gen_Name)
        {
            var gen_NameParameter = gen_Name != null ?
                new ObjectParameter("Gen_Name", gen_Name) :
                new ObjectParameter("Gen_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SYS_Drop_Generator", gen_NameParameter);
        }
    
        public virtual int SYS_Generator_CurrVal(string gen_Name)
        {
            var gen_NameParameter = gen_Name != null ?
                new ObjectParameter("Gen_Name", gen_Name) :
                new ObjectParameter("Gen_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SYS_Generator_CurrVal", gen_NameParameter);
        }
    
        public virtual int SYS_Generator_NextVal(string gen_Name)
        {
            var gen_NameParameter = gen_Name != null ?
                new ObjectParameter("Gen_Name", gen_Name) :
                new ObjectParameter("Gen_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SYS_Generator_NextVal", gen_NameParameter);
        }
    
        public virtual int SYS_Set_Generator(string gen_Name, Nullable<int> gen_Value)
        {
            var gen_NameParameter = gen_Name != null ?
                new ObjectParameter("Gen_Name", gen_Name) :
                new ObjectParameter("Gen_Name", typeof(string));
    
            var gen_ValueParameter = gen_Value.HasValue ?
                new ObjectParameter("Gen_Value", gen_Value) :
                new ObjectParameter("Gen_Value", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SYS_Set_Generator", gen_NameParameter, gen_ValueParameter);
        }
    
        public virtual int SYS_User_CsDel(Nullable<int> user_ID)
        {
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SYS_User_CsDel", user_IDParameter);
        }
    
        public virtual int SYS_User_Right_CsDel(Nullable<int> right_ID)
        {
            var right_IDParameter = right_ID.HasValue ?
                new ObjectParameter("Right_ID", right_ID) :
                new ObjectParameter("Right_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SYS_User_Right_CsDel", right_IDParameter);
        }
    
        public virtual int Card_AddCoupon(Nullable<long> peopleID, Nullable<int> couponDelay, Nullable<int> couponDelta, Nullable<int> couponTypeID, string couponNotes, Nullable<int> couponStatus, Nullable<int> divisionID, Nullable<int> actionID, Nullable<int> actionType, Nullable<long> clientID, Nullable<byte> notime, Nullable<long> transaction_Link, Nullable<long> card_Code, Nullable<int> unit_Id, Nullable<int> user_Id, Nullable<long> external_Id, Nullable<int> external_Index, ObjectParameter couponFrom, ObjectParameter couponTo, ObjectParameter couponID, ObjectParameter transactionID)
        {
            var peopleIDParameter = peopleID.HasValue ?
                new ObjectParameter("PeopleID", peopleID) :
                new ObjectParameter("PeopleID", typeof(long));
    
            var couponDelayParameter = couponDelay.HasValue ?
                new ObjectParameter("CouponDelay", couponDelay) :
                new ObjectParameter("CouponDelay", typeof(int));
    
            var couponDeltaParameter = couponDelta.HasValue ?
                new ObjectParameter("CouponDelta", couponDelta) :
                new ObjectParameter("CouponDelta", typeof(int));
    
            var couponTypeIDParameter = couponTypeID.HasValue ?
                new ObjectParameter("CouponTypeID", couponTypeID) :
                new ObjectParameter("CouponTypeID", typeof(int));
    
            var couponNotesParameter = couponNotes != null ?
                new ObjectParameter("CouponNotes", couponNotes) :
                new ObjectParameter("CouponNotes", typeof(string));
    
            var couponStatusParameter = couponStatus.HasValue ?
                new ObjectParameter("CouponStatus", couponStatus) :
                new ObjectParameter("CouponStatus", typeof(int));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(int));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            var actionTypeParameter = actionType.HasValue ?
                new ObjectParameter("ActionType", actionType) :
                new ObjectParameter("ActionType", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(long));
    
            var notimeParameter = notime.HasValue ?
                new ObjectParameter("Notime", notime) :
                new ObjectParameter("Notime", typeof(byte));
    
            var transaction_LinkParameter = transaction_Link.HasValue ?
                new ObjectParameter("Transaction_Link", transaction_Link) :
                new ObjectParameter("Transaction_Link", typeof(long));
    
            var card_CodeParameter = card_Code.HasValue ?
                new ObjectParameter("Card_Code", card_Code) :
                new ObjectParameter("Card_Code", typeof(long));
    
            var unit_IdParameter = unit_Id.HasValue ?
                new ObjectParameter("Unit_Id", unit_Id) :
                new ObjectParameter("Unit_Id", typeof(int));
    
            var user_IdParameter = user_Id.HasValue ?
                new ObjectParameter("User_Id", user_Id) :
                new ObjectParameter("User_Id", typeof(int));
    
            var external_IdParameter = external_Id.HasValue ?
                new ObjectParameter("External_Id", external_Id) :
                new ObjectParameter("External_Id", typeof(long));
    
            var external_IndexParameter = external_Index.HasValue ?
                new ObjectParameter("External_Index", external_Index) :
                new ObjectParameter("External_Index", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Card_AddCoupon", peopleIDParameter, couponDelayParameter, couponDeltaParameter, couponTypeIDParameter, couponNotesParameter, couponStatusParameter, divisionIDParameter, actionIDParameter, actionTypeParameter, clientIDParameter, notimeParameter, transaction_LinkParameter, card_CodeParameter, unit_IdParameter, user_IdParameter, external_IdParameter, external_IndexParameter, couponFrom, couponTo, couponID, transactionID);
        }
    
        public virtual int Card_AddOperation(Nullable<long> accountID, Nullable<decimal> summ, Nullable<int> divisionID, Nullable<int> actionID, Nullable<long> clientID, Nullable<long> card_Code, Nullable<short> actionType, Nullable<long> transaction_Link, string transaction_Notes, Nullable<long> external_ID, Nullable<int> external_Index, Nullable<System.DateTime> external_Date, Nullable<int> unit_Id, Nullable<int> user_Id, Nullable<short> operation_Type, Nullable<int> transactionType, ObjectParameter transactionID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var summParameter = summ.HasValue ?
                new ObjectParameter("Summ", summ) :
                new ObjectParameter("Summ", typeof(decimal));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(int));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(long));
    
            var card_CodeParameter = card_Code.HasValue ?
                new ObjectParameter("Card_Code", card_Code) :
                new ObjectParameter("Card_Code", typeof(long));
    
            var actionTypeParameter = actionType.HasValue ?
                new ObjectParameter("ActionType", actionType) :
                new ObjectParameter("ActionType", typeof(short));
    
            var transaction_LinkParameter = transaction_Link.HasValue ?
                new ObjectParameter("Transaction_Link", transaction_Link) :
                new ObjectParameter("Transaction_Link", typeof(long));
    
            var transaction_NotesParameter = transaction_Notes != null ?
                new ObjectParameter("Transaction_Notes", transaction_Notes) :
                new ObjectParameter("Transaction_Notes", typeof(string));
    
            var external_IDParameter = external_ID.HasValue ?
                new ObjectParameter("External_ID", external_ID) :
                new ObjectParameter("External_ID", typeof(long));
    
            var external_IndexParameter = external_Index.HasValue ?
                new ObjectParameter("External_Index", external_Index) :
                new ObjectParameter("External_Index", typeof(int));
    
            var external_DateParameter = external_Date.HasValue ?
                new ObjectParameter("External_Date", external_Date) :
                new ObjectParameter("External_Date", typeof(System.DateTime));
    
            var unit_IdParameter = unit_Id.HasValue ?
                new ObjectParameter("Unit_Id", unit_Id) :
                new ObjectParameter("Unit_Id", typeof(int));
    
            var user_IdParameter = user_Id.HasValue ?
                new ObjectParameter("User_Id", user_Id) :
                new ObjectParameter("User_Id", typeof(int));
    
            var operation_TypeParameter = operation_Type.HasValue ?
                new ObjectParameter("Operation_Type", operation_Type) :
                new ObjectParameter("Operation_Type", typeof(short));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Card_AddOperation", accountIDParameter, summParameter, divisionIDParameter, actionIDParameter, clientIDParameter, card_CodeParameter, actionTypeParameter, transaction_LinkParameter, transaction_NotesParameter, external_IDParameter, external_IndexParameter, external_DateParameter, unit_IdParameter, user_IdParameter, operation_TypeParameter, transactionTypeParameter, transactionID);
        }
    
        public virtual int Card_AddPeriod(Nullable<int> periodBegin, Nullable<int> period, Nullable<int> periodValue, Nullable<System.DateTimeOffset> clientTime, Nullable<int> accountTypeLook, Nullable<int> accountTypeEdit, Nullable<int> actionID, Nullable<System.DateTime> actionFrom, Nullable<System.DateTime> actionTo)
        {
            var periodBeginParameter = periodBegin.HasValue ?
                new ObjectParameter("PeriodBegin", periodBegin) :
                new ObjectParameter("PeriodBegin", typeof(int));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(int));
    
            var periodValueParameter = periodValue.HasValue ?
                new ObjectParameter("PeriodValue", periodValue) :
                new ObjectParameter("PeriodValue", typeof(int));
    
            var clientTimeParameter = clientTime.HasValue ?
                new ObjectParameter("ClientTime", clientTime) :
                new ObjectParameter("ClientTime", typeof(System.DateTimeOffset));
    
            var accountTypeLookParameter = accountTypeLook.HasValue ?
                new ObjectParameter("AccountTypeLook", accountTypeLook) :
                new ObjectParameter("AccountTypeLook", typeof(int));
    
            var accountTypeEditParameter = accountTypeEdit.HasValue ?
                new ObjectParameter("AccountTypeEdit", accountTypeEdit) :
                new ObjectParameter("AccountTypeEdit", typeof(int));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            var actionFromParameter = actionFrom.HasValue ?
                new ObjectParameter("ActionFrom", actionFrom) :
                new ObjectParameter("ActionFrom", typeof(System.DateTime));
    
            var actionToParameter = actionTo.HasValue ?
                new ObjectParameter("ActionTo", actionTo) :
                new ObjectParameter("ActionTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Card_AddPeriod", periodBeginParameter, periodParameter, periodValueParameter, clientTimeParameter, accountTypeLookParameter, accountTypeEditParameter, actionIDParameter, actionFromParameter, actionToParameter);
        }
    
        [DbFunction("CARD_SYSTEMEntities", "Card_HasCardIdentify")]
        public virtual IQueryable<Card_HasCardIdentify_Result> Card_HasCardIdentify(string value)
        {
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Card_HasCardIdentify_Result>("[CARD_SYSTEMEntities].[Card_HasCardIdentify](@Value)", valueParameter);
        }
    
        public virtual int Card_HasCheckTime(Nullable<short> transactionTimeType, Nullable<int> actionID, Nullable<long> clientID, Nullable<System.DateTimeOffset> clientTime, ObjectParameter openTime, ObjectParameter closeTime)
        {
            var transactionTimeTypeParameter = transactionTimeType.HasValue ?
                new ObjectParameter("TransactionTimeType", transactionTimeType) :
                new ObjectParameter("TransactionTimeType", typeof(short));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(long));
    
            var clientTimeParameter = clientTime.HasValue ?
                new ObjectParameter("ClientTime", clientTime) :
                new ObjectParameter("ClientTime", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Card_HasCheckTime", transactionTimeTypeParameter, actionIDParameter, clientIDParameter, clientTimeParameter, openTime, closeTime);
        }
    
        public virtual int Card_HasCouponExternal(Nullable<long> couponID, Nullable<int> couponTypeID, Nullable<short> couponStatus, Nullable<int> actionID, Nullable<byte> mode, Nullable<short> externalCouponType, ObjectParameter extCode, ObjectParameter couponID_Out)
        {
            var couponIDParameter = couponID.HasValue ?
                new ObjectParameter("CouponID", couponID) :
                new ObjectParameter("CouponID", typeof(long));
    
            var couponTypeIDParameter = couponTypeID.HasValue ?
                new ObjectParameter("CouponTypeID", couponTypeID) :
                new ObjectParameter("CouponTypeID", typeof(int));
    
            var couponStatusParameter = couponStatus.HasValue ?
                new ObjectParameter("CouponStatus", couponStatus) :
                new ObjectParameter("CouponStatus", typeof(short));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(byte));
    
            var externalCouponTypeParameter = externalCouponType.HasValue ?
                new ObjectParameter("ExternalCouponType", externalCouponType) :
                new ObjectParameter("ExternalCouponType", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Card_HasCouponExternal", couponIDParameter, couponTypeIDParameter, couponStatusParameter, actionIDParameter, modeParameter, externalCouponTypeParameter, extCode, couponID_Out);
        }
    
        public virtual int Card_HasCouponExternalExt(Nullable<int> couponTypeID, Nullable<int> couponsCount, Nullable<short> couponStatus, Nullable<int> actionID, Nullable<short> actionType, Nullable<int> clientID, Nullable<long> transactionParentID, Nullable<System.Guid> transactGUID)
        {
            var couponTypeIDParameter = couponTypeID.HasValue ?
                new ObjectParameter("CouponTypeID", couponTypeID) :
                new ObjectParameter("CouponTypeID", typeof(int));
    
            var couponsCountParameter = couponsCount.HasValue ?
                new ObjectParameter("CouponsCount", couponsCount) :
                new ObjectParameter("CouponsCount", typeof(int));
    
            var couponStatusParameter = couponStatus.HasValue ?
                new ObjectParameter("CouponStatus", couponStatus) :
                new ObjectParameter("CouponStatus", typeof(short));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            var actionTypeParameter = actionType.HasValue ?
                new ObjectParameter("ActionType", actionType) :
                new ObjectParameter("ActionType", typeof(short));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var transactionParentIDParameter = transactionParentID.HasValue ?
                new ObjectParameter("TransactionParentID", transactionParentID) :
                new ObjectParameter("TransactionParentID", typeof(long));
    
            var transactGUIDParameter = transactGUID.HasValue ?
                new ObjectParameter("TransactGUID", transactGUID) :
                new ObjectParameter("TransactGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Card_HasCouponExternalExt", couponTypeIDParameter, couponsCountParameter, couponStatusParameter, actionIDParameter, actionTypeParameter, clientIDParameter, transactionParentIDParameter, transactGUIDParameter);
        }
    
        public virtual int Card_HasExit(Nullable<int> actionID, Nullable<int> actionType, Nullable<long> clientID, Nullable<System.DateTimeOffset> clientTime, ObjectParameter prefID, ObjectParameter divisionID, ObjectParameter actionFrom, ObjectParameter actionTo)
        {
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            var actionTypeParameter = actionType.HasValue ?
                new ObjectParameter("ActionType", actionType) :
                new ObjectParameter("ActionType", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(long));
    
            var clientTimeParameter = clientTime.HasValue ?
                new ObjectParameter("ClientTime", clientTime) :
                new ObjectParameter("ClientTime", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Card_HasExit", actionIDParameter, actionTypeParameter, clientIDParameter, clientTimeParameter, prefID, divisionID, actionFrom, actionTo);
        }
    
        public virtual int Card_HasFilter(string filter, string table, Nullable<int> levelNo)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));
    
            var levelNoParameter = levelNo.HasValue ?
                new ObjectParameter("LevelNo", levelNo) :
                new ObjectParameter("LevelNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Card_HasFilter", filterParameter, tableParameter, levelNoParameter);
        }
    
        public virtual int Card_HasNotificationEvent(Nullable<byte> eventType, Nullable<int> actionID, Nullable<byte> hasUseActionTransactions, Nullable<int> transaction_Time_Show, string accountTypeIds, Nullable<System.DateTimeOffset> actionFrom, Nullable<System.DateTimeOffset> actionTo, ObjectParameter eventCursor)
        {
            var eventTypeParameter = eventType.HasValue ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(byte));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            var hasUseActionTransactionsParameter = hasUseActionTransactions.HasValue ?
                new ObjectParameter("hasUseActionTransactions", hasUseActionTransactions) :
                new ObjectParameter("hasUseActionTransactions", typeof(byte));
    
            var transaction_Time_ShowParameter = transaction_Time_Show.HasValue ?
                new ObjectParameter("Transaction_Time_Show", transaction_Time_Show) :
                new ObjectParameter("Transaction_Time_Show", typeof(int));
    
            var accountTypeIdsParameter = accountTypeIds != null ?
                new ObjectParameter("AccountTypeIds", accountTypeIds) :
                new ObjectParameter("AccountTypeIds", typeof(string));
    
            var actionFromParameter = actionFrom.HasValue ?
                new ObjectParameter("ActionFrom", actionFrom) :
                new ObjectParameter("ActionFrom", typeof(System.DateTimeOffset));
    
            var actionToParameter = actionTo.HasValue ?
                new ObjectParameter("ActionTo", actionTo) :
                new ObjectParameter("ActionTo", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Card_HasNotificationEvent", eventTypeParameter, actionIDParameter, hasUseActionTransactionsParameter, transaction_Time_ShowParameter, accountTypeIdsParameter, actionFromParameter, actionToParameter, eventCursor);
        }
    
        public virtual int Card_HasPeriod(Nullable<System.DateTimeOffset> currentTime, Nullable<int> period, Nullable<int> value, Nullable<int> isCurrent, Nullable<int> isCalendar, Nullable<int> isTime, Nullable<System.TimeSpan> workTime, Nullable<int> actionID, ObjectParameter from, ObjectParameter to)
        {
            var currentTimeParameter = currentTime.HasValue ?
                new ObjectParameter("CurrentTime", currentTime) :
                new ObjectParameter("CurrentTime", typeof(System.DateTimeOffset));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            var isCurrentParameter = isCurrent.HasValue ?
                new ObjectParameter("IsCurrent", isCurrent) :
                new ObjectParameter("IsCurrent", typeof(int));
    
            var isCalendarParameter = isCalendar.HasValue ?
                new ObjectParameter("IsCalendar", isCalendar) :
                new ObjectParameter("IsCalendar", typeof(int));
    
            var isTimeParameter = isTime.HasValue ?
                new ObjectParameter("IsTime", isTime) :
                new ObjectParameter("IsTime", typeof(int));
    
            var workTimeParameter = workTime.HasValue ?
                new ObjectParameter("WorkTime", workTime) :
                new ObjectParameter("WorkTime", typeof(System.TimeSpan));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Card_HasPeriod", currentTimeParameter, periodParameter, valueParameter, isCurrentParameter, isCalendarParameter, isTimeParameter, workTimeParameter, actionIDParameter, from, to);
        }
    
        public virtual int Card_HasReceipt(string checkData, string checkXML, Nullable<int> actionID, Nullable<int> actionType, Nullable<byte> mode, ObjectParameter summ, ObjectParameter summ_PaymentDetails, ObjectParameter summ_PaymentDetails_Count, ObjectParameter summ_PaymentFull, ObjectParameter summ_PaymentCurrency, ObjectParameter summ_DiscountFull, ObjectParameter summ_DiscountCurrency)
        {
            var checkDataParameter = checkData != null ?
                new ObjectParameter("CheckData", checkData) :
                new ObjectParameter("CheckData", typeof(string));
    
            var checkXMLParameter = checkXML != null ?
                new ObjectParameter("CheckXML", checkXML) :
                new ObjectParameter("CheckXML", typeof(string));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            var actionTypeParameter = actionType.HasValue ?
                new ObjectParameter("ActionType", actionType) :
                new ObjectParameter("ActionType", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Card_HasReceipt", checkDataParameter, checkXMLParameter, actionIDParameter, actionTypeParameter, modeParameter, summ, summ_PaymentDetails, summ_PaymentDetails_Count, summ_PaymentFull, summ_PaymentCurrency, summ_DiscountFull, summ_DiscountCurrency);
        }
    
        public virtual int Card_HasSegments(Nullable<long> peopleID, string segmentIDs, Nullable<int> required, Nullable<int> actionID)
        {
            var peopleIDParameter = peopleID.HasValue ?
                new ObjectParameter("PeopleID", peopleID) :
                new ObjectParameter("PeopleID", typeof(long));
    
            var segmentIDsParameter = segmentIDs != null ?
                new ObjectParameter("SegmentIDs", segmentIDs) :
                new ObjectParameter("SegmentIDs", typeof(string));
    
            var requiredParameter = required.HasValue ?
                new ObjectParameter("Required", required) :
                new ObjectParameter("Required", typeof(int));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Card_HasSegments", peopleIDParameter, segmentIDsParameter, requiredParameter, actionIDParameter);
        }
    
        public virtual int Card_HasSegmentsEx(string segmentIDs, Nullable<byte> mode, Nullable<int> actionID)
        {
            var segmentIDsParameter = segmentIDs != null ?
                new ObjectParameter("SegmentIDs", segmentIDs) :
                new ObjectParameter("SegmentIDs", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(byte));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Card_HasSegmentsEx", segmentIDsParameter, modeParameter, actionIDParameter);
        }
    
        public virtual int Card_HasTime(Nullable<System.DateTime> currentTime, Nullable<System.DateTime> birthday, string timeIDs, Nullable<int> actionID, ObjectParameter result, ObjectParameter hasBirthday)
        {
            var currentTimeParameter = currentTime.HasValue ?
                new ObjectParameter("CurrentTime", currentTime) :
                new ObjectParameter("CurrentTime", typeof(System.DateTime));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var timeIDsParameter = timeIDs != null ?
                new ObjectParameter("TimeIDs", timeIDs) :
                new ObjectParameter("TimeIDs", typeof(string));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Card_HasTime", currentTimeParameter, birthdayParameter, timeIDsParameter, actionIDParameter, result, hasBirthday);
        }
    
        public virtual int Card_HasVisit(Nullable<long> peopleID, Nullable<System.DateTimeOffset> from, Nullable<System.DateTimeOffset> to, Nullable<byte> visitType, string clientIds, string accountTypeIds, Nullable<byte> workTime, Nullable<int> actionID, ObjectParameter visitsCount, ObjectParameter visitsSumm)
        {
            var peopleIDParameter = peopleID.HasValue ?
                new ObjectParameter("PeopleID", peopleID) :
                new ObjectParameter("PeopleID", typeof(long));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTimeOffset));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTimeOffset));
    
            var visitTypeParameter = visitType.HasValue ?
                new ObjectParameter("VisitType", visitType) :
                new ObjectParameter("VisitType", typeof(byte));
    
            var clientIdsParameter = clientIds != null ?
                new ObjectParameter("ClientIds", clientIds) :
                new ObjectParameter("ClientIds", typeof(string));
    
            var accountTypeIdsParameter = accountTypeIds != null ?
                new ObjectParameter("AccountTypeIds", accountTypeIds) :
                new ObjectParameter("AccountTypeIds", typeof(string));
    
            var workTimeParameter = workTime.HasValue ?
                new ObjectParameter("WorkTime", workTime) :
                new ObjectParameter("WorkTime", typeof(byte));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Card_HasVisit", peopleIDParameter, fromParameter, toParameter, visitTypeParameter, clientIdsParameter, accountTypeIdsParameter, workTimeParameter, actionIDParameter, visitsCount, visitsSumm);
        }
    
        [DbFunction("CARD_SYSTEMEntities", "Card_ParseReceipt")]
        public virtual IQueryable<Card_ParseReceipt_Result> Card_ParseReceipt(string xml, Nullable<short> lineType)
        {
            var xmlParameter = xml != null ?
                new ObjectParameter("Xml", xml) :
                new ObjectParameter("Xml", typeof(string));
    
            var lineTypeParameter = lineType.HasValue ?
                new ObjectParameter("LineType", lineType) :
                new ObjectParameter("LineType", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Card_ParseReceipt_Result>("[CARD_SYSTEMEntities].[Card_ParseReceipt](@Xml, @LineType)", xmlParameter, lineTypeParameter);
        }
    
        [DbFunction("CARD_SYSTEMEntities", "Card_ParseReceiptExt")]
        public virtual IQueryable<Card_ParseReceiptExt_Result> Card_ParseReceiptExt(Nullable<short> lineType)
        {
            var lineTypeParameter = lineType.HasValue ?
                new ObjectParameter("LineType", lineType) :
                new ObjectParameter("LineType", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Card_ParseReceiptExt_Result>("[CARD_SYSTEMEntities].[Card_ParseReceiptExt](@LineType)", lineTypeParameter);
        }
    
        public virtual int Card_Script_WriteLog(Nullable<long> actionID, string text, Nullable<byte> sysEmailFlag, Nullable<byte> logRate)
        {
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(long));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var sysEmailFlagParameter = sysEmailFlag.HasValue ?
                new ObjectParameter("SysEmailFlag", sysEmailFlag) :
                new ObjectParameter("SysEmailFlag", typeof(byte));
    
            var logRateParameter = logRate.HasValue ?
                new ObjectParameter("LogRate", logRate) :
                new ObjectParameter("LogRate", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Card_Script_WriteLog", actionIDParameter, textParameter, sysEmailFlagParameter, logRateParameter);
        }
    
        public virtual int Card_SendSYSLogEmail(string subject, string action_Name, Nullable<int> clientID, Nullable<int> actionID, Nullable<byte> log_level, Nullable<byte> mode)
        {
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var action_NameParameter = action_Name != null ?
                new ObjectParameter("Action_Name", action_Name) :
                new ObjectParameter("Action_Name", typeof(string));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            var log_levelParameter = log_level.HasValue ?
                new ObjectParameter("log_level", log_level) :
                new ObjectParameter("log_level", typeof(byte));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Card_SendSYSLogEmail", subjectParameter, action_NameParameter, clientIDParameter, actionIDParameter, log_levelParameter, modeParameter);
        }
    
        [DbFunction("CARD_SYSTEMEntities", "Card_Split_Str")]
        public virtual IQueryable<Nullable<int>> Card_Split_Str(string inputString, string delimiter)
        {
            var inputStringParameter = inputString != null ?
                new ObjectParameter("InputString", inputString) :
                new ObjectParameter("InputString", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[CARD_SYSTEMEntities].[Card_Split_Str](@InputString, @Delimiter)", inputStringParameter, delimiterParameter);
        }
    }
}
