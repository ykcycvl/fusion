@model Fusion.Models.Callback.TblViewModel.TblsModelDown

@{
    ViewBag.Title = "Обратная связь";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="~/Content/tbl_styles.css">
<link rel="stylesheet" type="text/css" href="~/Content/tabsort0.css">
<script type="text/javascript" src="~/Content/tabsort0.js"></script> @*скрипт для сортировки*@
<script type="text/javascript" src="~/Content/filterTable.v1.0.min.js"></script> @*скрипт для фильтрации*@


@* кнопка отчёта *@
<script>
    $(function () {
        $("#AddTransactionDialog").dialog({
            buttons: {
                "Закрыть": function () {
                    $(this).dialog("close");
                }
            },
            close: function (event, ui) { },
            modal: true,
            width: 600,
            height: 550,
            autoOpen: false,
            draggable: true,
            closeText: '',
            resizable: true
        });
    });
</script>

<h1>Обратная связь</h1>
<div id="wrapper">
    @using (Html.BeginForm("viewtable", "Callback", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "contact_form", role = "form" }))
    {
        //кнопка добавления
        <div id="datefilter">
            <a href="~/callback/uniform?updorins=-1" class="btn btn-success">Добавить отзыв</a>
            @Html.EditorFor(m => m.DateNEW1, new { @required = true, @type = "date", @ID = "daten1", @value = Model.DateNEW1 })
            @Html.EditorFor(m => m.DateNEW2, new { @required = true, @type = "date", @ID = "daten2", @value = Model.DateNEW2 })
            <button type="submit" class="btn btn-primary" id="">Вывести отзывы</button>
            @* кнопка для отчёта *@
            <button type="button" class="btn btn-danger" id="AddTransactionBtn">Отчет</button>
        </div>

        <div id="filters">
            @*фильтры*@
            <input id="namef" placeholder="Имя гостя" />

            <select id="reitf">
                <option value="">---</option>
                <option value="Положительный">Полож</option>
                <option value="Отрицательный">Отриц</option>
                <option value="Нейтральный">Нейтр</option>
                <option value="ОТРАВЛЕНИЕ">ОТРАВ</option>
            </select>

            <input id="numf" placeholder="Номер телефона" />

            <input onkeyup="datenew1()" id="datenew1" @*type="date"*@ />
            <input onkeyup="datenew2()" id="datenew2" @*type="date"*@ />

            <input id="dateclose" @*type="date"*@ />

            <select id="unitf">
                <option value="">---</option>
                <option value="Ресторан">Ресторан</option>
                <option value="Вынос">Вынос</option>
                <option value="Доставка">Доставка</option>
                <option value="КЦ">КЦ</option>
                <option value="БК">БК</option>
                <option value="Маркетинг/сайт">Маркет.</option>
                <option value="Закуп">Отдел закупа</option>
                <option value="Тех. служба">Тех. служба</option>
                <option value="Инф. тех.">Инф. тех.</option>
                <option value="HR">HR</option>
            </select>

            <select id="digits">
                <option value="">---</option>
                <option value="ТОКИО">ТОКИО</option>
                <option value="Гайдамак">Гайдамак</option>
                <option value="Киото">Киото</option>
                <option value="Мауро">Мауро</option>
                <option value="Хоум">Хоум</option>
                <option value="Каваи">Каваи</option>
                <option value="Уссурийск">Уссурийск</option>
                <option value="Находка">Находка</option>
                <option value="Артем">Артем</option>
                <option value="Чемпион">Чемпион</option>
            </select>

            <select id="typef">
                <option value="">---</option>
                <option value="Качество">Качество</option>
                <option value="Сервис">Сервис</option>
                <option value="Качество/Сервис">Качество/Сервис</option>
                <option value="Скорость">Скорость</option>
                <option value="Прочее">Прочее</option>
                <option value="Предложение">Предложение</option>
                <option value="Коммерческое предложение">Комм. предложение</option>
                <option value="Неполный комплимент">Неполный комплимент</option>
            </select>

            <select id="sourcef">
                <option value="">---</option>
                <option value="Сайт">Сайт</option>
                <option value="Инста">Инста</option>
                <option value="Соцсети">Соцсети</option>
                <option value="vl.ru">vl.ru</option>
                <option value="Чек-телефон">Чек-телефон</option>
                <option value="Лично/Жалобная книга">Лично/Ж. книга</option>
                <option value="КЦ">КЦ</option>
                <option value="БК">БК</option>
                <option value="Почта">Почта</option>
                <option value="Приложение">Приложение</option>
            </select>

            <script>
                $(function () {
                    $("#AddTransactionBtn").click(function () {
                        $("#AddTransactionDialog").dialog("open");
                        return false;
                    });
                });
            </script>

            <input type="checkbox" id="nalid" value="0" />Наличные
            <input type="checkbox" id="bonusid" value="0" />Бонусы
            <input type="checkbox" id="sertid" value="0" />Сертификат
            <input type="checkbox" id="discountid" value="0" />Скидка
            <select id="payer">
                <option value="">---</option>
                <option value="Cотрудник">Cотрудник</option>
                <option value="Компания">Компания</option>
                <option value="Сотрудник/Компания">Сотрудник/Компания</option>
            </select>


        </div>


        //отзывы
        <table class="sortable table table-bordered table-hover" id="t">
            <thead>
                <tr>
                    <th>ID</th>
                    <th class="name">Имя гостя</th>
                    <th>Оценка</th>
                    <th class="numb">Номер телефона</th>
                    <th>Дата появления</th>
                    <th>Дата закрытия</th>
                    <th class="unit">Подразделение</th>
                    <th>Ресторан</th>
                    <th>Тип</th>
                    <th>Источник</th>
                </tr>
            </thead>
            <tbody id="target">
                @foreach (var attribute in Model.persons)
                {
                    string rowColor = "";
                    string textColor = "";

                    if (@attribute.DateClose != null && @attribute.Rating != null)
                    {
                        textColor = "#ffffff";
                        switch (attribute.Rating)
                        {
                            case "Положительный":
                                rowColor = "#669966";
                                break;
                            case "Отрицательный":
                                rowColor = "#ec971f";
                                break;
                            case "Нейтральный":
                                rowColor = "#337ab7";
                                break;
                            case "Критичный":
                                rowColor = "#c9302c";
                                break;
                            case "ОТРАВЛЕНИЕ":
                                rowColor = "#000000";
                                break;
                        }
                    }

                    if (attribute.Rating == null || attribute.Rating == String.Empty)
                    {
                        attribute.Rating = "-";
                    }
                    if (attribute.DateClose == null || attribute.DateClose == String.Empty)
                    {
                        attribute.DateClose = "-";
                    }
                    if (attribute.Unit == null || attribute.Unit == String.Empty)
                    {
                        attribute.Unit = "-";
                    }
                    if (attribute.Rest == null || attribute.Rest == String.Empty)
                    {
                        attribute.Rest = "-";
                    }
                    if (attribute.Phone == null || attribute.Phone == String.Empty)
                    {
                        attribute.Phone = "-";
                    }
                    if (attribute.Type == null || attribute.Type == String.Empty)
                    {
                        attribute.Type = "-";
                    }
                    if (attribute.Source == null || attribute.Source == String.Empty)
                    {
                        attribute.Source = "-";
                    }

                    int cost;
                    int costpoint;
                    int costsert;
                    int costdisc;
                    cost = Convert.ToInt32(@attribute.Cost);
                    costpoint = Convert.ToInt32(@attribute.CostPoint);
                    costsert = Convert.ToInt32(@attribute.CostSert);
                    costdisc = Convert.ToInt32(attribute.CostDiscount);

                    <tr id="@attribute.id" style="background:@rowColor" onclick="document.location='/Callback/uniform?updorins=@attribute.id'">
                        <td style="color: @textColor">@attribute.id</td>
                        <td>@Html.ActionLink(attribute.FIO, "uniform", new { @updorins = @attribute.id }, new { @style = "color:" + textColor })</td>
                        <td>@Html.ActionLink(attribute.Rating, "uniform", new { @updorins = @attribute.id }, new { @style = "color:" + textColor })</td>
                        <td>@Html.ActionLink(attribute.Phone, "uniform", new { @updorins = @attribute.id }, new { @style = "color:" + textColor })</td>
                        <td class="datenew3">@Html.ActionLink(attribute.Data, "uniform", new { @updorins = @attribute.id }, new { @style = "color:" + textColor })</td>
                        <td>@Html.ActionLink(attribute.DateClose, "uniform", new { @updorins = @attribute.id }, new { @style = "color:" + textColor })</td>
                        <td>@Html.ActionLink(attribute.Unit, "uniform", new { @updorins = @attribute.id }, new { @style = "color:" + textColor })</td>
                        <td>@Html.ActionLink(attribute.Rest, "uniform", new { @updorins = @attribute.id }, new { @style = "color:" + textColor })</td>
                        <td>@Html.ActionLink(attribute.Type, "uniform", new { @updorins = @attribute.id }, new { @style = "color:" + textColor })</td>
                        <td>@Html.ActionLink(attribute.Source, "uniform", new { @updorins = @attribute.id }, new { @style = "color:" + textColor })</td>

                        <td hidden id="costid">@cost</td>
                        <td hidden id="costpointid">@costpoint</td>
                        <td hidden id="costsertid">@costsert</td>
                        <td hidden id="costdiscid">@costdisc</td>
                        <td hidden id="cldate">@attribute.DateClose</td>
                        <td hidden id="payerf">@attribute.Payer1</td>

                    </tr>
                }
            </tbody>
        </table>

    }

    @** скрипт для фильтров *@
    <script>
        filterTable(document.getElementById("target"), {
            1: new filterTable.Filter(document.getElementById("namef"),
                /* Коллбэк ф-ция валидации */
                function (value, filters, i) {
                    var c_value = value.toLowerCase(),
                        f_value = filters[i].value.toLowerCase();
                    return c_value.indexOf(f_value) === 0;
                },
                /* Будем вызывать валидацию по событию onkeyup фильтра */
                "onkeyup"
            ),
            2: document.getElementById("reitf"),
            3: new filterTable.Filter(document.getElementById("numf"),
                /* Коллбэк ф-ция валидации */
                function (value, filters, i) {
                    return value.indexOf(filters[i].value) === 0;
                },
                /* Будем вызывать валидацию по событию onkeyup фильтра */
                "onkeyup"
            ),
            4: new filterTable.Filter(document.getElementById("datenew2"),
                /* Коллбэк ф-ция валидации */
                function (value, filters, i) {
                    return value.indexOf(filters[i].value) === 0;
                },
                /* Будем вызывать валидацию по событию onkeyup фильтра */
                "onkeyup"
            ),
            //document.getElementById("datenew2"),
            5: new filterTable.Filter(document.getElementById("dateclose"),
                /* Коллбэк ф-ция валидации */
                function (value, filters, i) {
                    return value.indexOf(filters[i].value) === 0;
                },
                /* Будем вызывать валидацию по событию onkeyup фильтра */
                "onkeyup"
            ),
            //document.getElementById("dateclose"),
            6: document.getElementById("unitf"),
            7: document.getElementById("digits"),
            8: document.getElementById("typef"),
            9: document.getElementById("sourcef"),
            10: new filterTable.Filter([document.getElementById("nalid")],
                function (value, filters, i) {
                    if (false === filters[i].checked) return true;
                    return filters[0].checked && filters[0].value !== value;
                }
            ),
            11: new filterTable.Filter([document.getElementById("bonusid")],
                function (value, filters, i) {
                    if (false === filters[i].checked) return true;
                    return filters[0].checked && filters[0].value !== value;
                }
            ),
            12: new filterTable.Filter([document.getElementById("sertid")],
                function (value, filters, i) {
                    if (false === filters[i].checked) return true;
                    return filters[0].checked && filters[0].value !== value;
                }
            ),
            13: new filterTable.Filter([document.getElementById("discountid")],
                function (value, filters, i) {
                    if (false === filters[i].checked) return true;
                    return filters[0].checked && filters[0].value !== value;
                }
            ),
            14: document.getElementById("payer")
        }
        );

    </script>

    <script>

        function datenew1() {
            var date1 = document.getElementById("datenew1").value;
            var date2 = document.getElementById("datenew2").value;
            var day1 = date1.substring(0, 2);
            var month1 = date1.substring(3, 5);
            var year1 = date1.substring(6, 10);

            var regul = /\d{2}.{1}\d{2}.{1}\d{4}/;
            if (regul.test(date1) && regul.test(date2)) {
                //ф-я сортировки и обновления отчёта
            }

        }

        function datenew2() {
            var date2 = document.getElementById("datenew2").value;
            var date1 = document.getElementById("datenew1").value;
            var day2 = date2.substring(0, 2);
            var month2 = date2.substring(3, 5);
            var year2 = date2.substring(6, 10);

            var regul = /\d{2}.{1}\d{2}.{1}\d{4}/;
            if (regul.test(date1) && regul.test(date2)) {
                //ф-я сортировки и обновления отчёта
            }

        }
    </script>
</div>


<div id="AddTransactionDialog" title="Отчет по отзывам">
    <span>Всего пришло отзывов: @Model.persons.Count</span>
    @{
        int sum = 0;
        int sumb = 0;
        int sums = 0;
    }
    @foreach (var attribute in Model.persons)
    {
        sum = sum + Convert.ToInt32(attribute.Cost);
        sumb = sumb + Convert.ToInt32(attribute.CostPoint);
        sums = sums + Convert.ToInt32(attribute.CostSert);
    }
    @{
        int sumnal = 0;
        int sumbonus = 0;
        int sumsert = 0;
    }
    @foreach (var attribute in Model.persons.Where(p => p.Payer1 == "Cотрудник"))
    {
        sumnal = sumnal + Convert.ToInt32(attribute.Cost);
        sumbonus = sumbonus + Convert.ToInt32(attribute.CostPoint);
        sumsert = sumsert + Convert.ToInt32(attribute.CostSert);
    }
    @{
        int compsumnal = 0;
        int compsumbonus = 0;
        int compsumsert = 0;
    }
    @foreach (var attribute in Model.persons.Where(p => p.Payer1 == "Компания"))
    {
        compsumnal = compsumnal + Convert.ToInt32(attribute.Cost);
        compsumbonus = compsumbonus + Convert.ToInt32(attribute.CostPoint);
        compsumsert = compsumsert + Convert.ToInt32(attribute.CostSert);
    }
    <br />
    @{
        int stafcompsumnal = 0;
        int stafcompsumbonus = 0;
        int stafcompsumsert = 0;
    }
    @foreach (var attribute in Model.persons.Where(p => p.Payer1 == "Cотрудник/Компания"))
    {
        stafcompsumnal = stafcompsumnal + Convert.ToInt32(attribute.Cost);
        stafcompsumbonus = stafcompsumbonus + Convert.ToInt32(attribute.CostPoint);
        stafcompsumsert = stafcompsumsert + Convert.ToInt32(attribute.CostSert);
    }
    <br />
    <span>
        Все расходы(наличные): @sum руб.<br />
        Все расходы(баллы): @sumb б.<br />
        Все расходы(сертификаты): @sums руб.<br />
    </span>
    <br />
    <span>
        Из них оплачено сотрудниками: <br />
        Наличные: @sumnal <br />
        Бонусы: @sumbonus<br />
        Сертификат: @sumsert<br />
    </span>
    <br />
    <span>
        Оплачено компанией: <br />
        Наличные: @compsumnal <br />
        Бонусы: @compsumbonus<br />
        Сертификат: @compsumsert<br />
    </span>
    <br />
    <span>
        Оплачено 50/50: <br />
        Наличные: @stafcompsumnal <br />
        Бонусы: @stafcompsumbonus<br />
        Сертификат: @stafcompsumsert<br />
    </span>
    <br />
    <span>
        Кол-во отзывов со скидкой: @Model.persons.Where(n => !String.IsNullOrEmpty(n.CostDiscount)).Count()
    </span>
    <br />

    @{
        int sum1 = 0;
    }
    @foreach (var attribute in Model.persons.Where(n => n.Rating == "Положительный"))
    {
        sum1 = sum1 + 1;
    }

    @{
        int sum2 = 0;
    }
    @foreach (var attribute in Model.persons.Where(n => n.Rating == "Отрицательный"))
    {
        sum2 = sum2 + 1;
    }

    @{
        int sum3 = 0;
    }
    @foreach (var attribute in Model.persons.Where(n => n.Rating == "Критичный"))
    {
        sum3 = sum3 + 1;
    }

    @{
        int sum5 = 0;
    }
    @foreach (var attribute in Model.persons.Where(n => n.Rating == "ОТРАВЛЕНИЕ"))
    {
        sum5 = sum5 + 1;
    }
    @{
        int sum6 = 0;
    }
    @foreach (var attribute in Model.persons.Where(n => n.Rating == "Нейтральный"))
    {
        sum6 = sum6 + 1;
    }
    @{
        int sum4 = Model.persons.Count - sum1 - sum2 - sum3 - sum5 - sum6;
    }

    <br />
    <span>
        Всего положительных отзывов: @sum1 <br />
        Всего отрицательных отзывов: @sum2 <br />
        Всего нейтральных отзывов: @sum6 <br />
        Всего критичных отзывов: @sum3 <br />
        Всего ОТРАВЛЕНИЙ: @sum5 <br />
        Отзывов не обработано: @sum4
    </span><br /><br />
    <span class="text text-danger"><strong>Отчет по подразделениям: </strong></span><br /><br />
    @foreach (var it in Model.persons.GroupBy(h => h.Unit).Select(g => new { key = g.Key }))
    {
        <span>@it.key - @Model.persons.Where(f => f.Unit == it.key && f.Rating == "Положительный").Count() (Положительные)</span><br />
        <span>@it.key - @Model.persons.Where(f => f.Unit == it.key && f.Rating == "Отрицательный").Count() (Отрицательные)</span><br />
        <span>@it.key - @Model.persons.Where(f => f.Unit == it.key && f.Rating == "Критичный").Count() (Критичные)</span><br />
        <span>@it.key - @Model.persons.Where(f => f.Unit == it.key && f.Rating == "ОТРАВЛЕНИЕ").Count() (ОТРАВЛЕНИЕ)</span><br />
        <span>@it.key - @Model.persons.Where(f => f.Unit == it.key && f.Rating == "Нейтральный").Count() (нейтральные)</span><br /><br />
    }
    <span class="text text-danger"><strong>Отчет по ресторанам: </strong></span><br /><br />
    @foreach (var it in Model.persons.GroupBy(h => h.Rest).Select(f => new { key = f.Key }))
    {
        <span>@it.key - @Model.persons.Where(f => f.Rest == it.key && f.Rating == "Положительный").Count() (Положительные)</span><br />
        <span>@it.key - @Model.persons.Where(f => f.Rest == it.key && f.Rating == "Отрицательный").Count() (Отрицательные)</span><br />
        <span>@it.key - @Model.persons.Where(f => f.Rest == it.key && f.Rating == "Критичный").Count() (Критичные)</span><br />
        <span>@it.key - @Model.persons.Where(f => f.Rest == it.key && f.Rating == "ОТРАВЛЕНИЕ").Count() (ОТРАВЛЕНИЕ)</span><br />
        <span>@it.key - @Model.persons.Where(f => f.Rest == it.key && f.Rating == "Нейтральный").Count() (нейтральные)</span><br /><br />
    }
    <br />
    @foreach (var it in Model.persons.GroupBy(g => g.Rest).Select(t => new { Key = t.Key }))
    {
        foreach (var iy in Model.persons.Where(f => f.Rest == it.Key).GroupBy(r => r.Type).Select(e => new { Key = e.Key, count = e.Count() }))
        {
            <span>@it.Key - @iy.Key - @iy.count</span><br />
        }
        <br />
    }
    <br />
    <span class="text text-danger"><strong>Отчет по источникам: </strong></span><br /><br />
    @foreach (var it in Model.persons.GroupBy(h => h.Source).Select(f => new { key = f.Key, count = f.Count() }))
    {
        <span>@it.key - @it.count</span><br />
    }
</div>
